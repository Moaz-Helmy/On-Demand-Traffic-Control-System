
Embedded_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000013e8  0000147c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800070  00800070  0000148c  2**0
                  ALLOC
  3 .stab         00002ae4  00000000  00000000  0000148c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002701  00000000  00000000  00003f70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__vector_1>
       8:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__vector_2>
       c:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_9>
      28:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__vector_10>
      2c:	0c 94 89 01 	jmp	0x312	; 0x312 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 f2 09 	jmp	0x13e4	; 0x13e4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
/*******************************************************************************
 *                                Main Function                                *
 *******************************************************************************/

int main(void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62

	app_start();
      9a:	0e 94 47 07 	call	0xe8e	; 0xe8e <app_start>
      9e:	ff cf       	rjmp	.-2      	; 0x9e <main+0xc>

000000a0 <__vector_7>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
/*ISR for the compare mode*/
ISR(TIMER1_COMPA_vect)
{
      a0:	1f 92       	push	r1
      a2:	0f 92       	push	r0
      a4:	0f b6       	in	r0, 0x3f	; 63
      a6:	0f 92       	push	r0
      a8:	11 24       	eor	r1, r1
      aa:	2f 93       	push	r18
      ac:	3f 93       	push	r19
      ae:	4f 93       	push	r20
      b0:	5f 93       	push	r21
      b2:	6f 93       	push	r22
      b4:	7f 93       	push	r23
      b6:	8f 93       	push	r24
      b8:	9f 93       	push	r25
      ba:	af 93       	push	r26
      bc:	bf 93       	push	r27
      be:	ef 93       	push	r30
      c0:	ff 93       	push	r31
      c2:	df 93       	push	r29
      c4:	cf 93       	push	r28
      c6:	cd b7       	in	r28, 0x3d	; 61
      c8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
      ca:	80 91 70 00 	lds	r24, 0x0070
      ce:	90 91 71 00 	lds	r25, 0x0071
      d2:	00 97       	sbiw	r24, 0x00	; 0
      d4:	29 f0       	breq	.+10     	; 0xe0 <__vector_7+0x40>
	{
		(*g_callBackPtr)();
      d6:	e0 91 70 00 	lds	r30, 0x0070
      da:	f0 91 71 00 	lds	r31, 0x0071
      de:	09 95       	icall
	}
}
      e0:	cf 91       	pop	r28
      e2:	df 91       	pop	r29
      e4:	ff 91       	pop	r31
      e6:	ef 91       	pop	r30
      e8:	bf 91       	pop	r27
      ea:	af 91       	pop	r26
      ec:	9f 91       	pop	r25
      ee:	8f 91       	pop	r24
      f0:	7f 91       	pop	r23
      f2:	6f 91       	pop	r22
      f4:	5f 91       	pop	r21
      f6:	4f 91       	pop	r20
      f8:	3f 91       	pop	r19
      fa:	2f 91       	pop	r18
      fc:	0f 90       	pop	r0
      fe:	0f be       	out	0x3f, r0	; 63
     100:	0f 90       	pop	r0
     102:	1f 90       	pop	r1
     104:	18 95       	reti

00000106 <__vector_9>:

/*ISR for the overflow mode*/
ISR(TIMER1_OVF_vect)
{
     106:	1f 92       	push	r1
     108:	0f 92       	push	r0
     10a:	0f b6       	in	r0, 0x3f	; 63
     10c:	0f 92       	push	r0
     10e:	11 24       	eor	r1, r1
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	4f 93       	push	r20
     116:	5f 93       	push	r21
     118:	6f 93       	push	r22
     11a:	7f 93       	push	r23
     11c:	8f 93       	push	r24
     11e:	9f 93       	push	r25
     120:	af 93       	push	r26
     122:	bf 93       	push	r27
     124:	ef 93       	push	r30
     126:	ff 93       	push	r31
     128:	df 93       	push	r29
     12a:	cf 93       	push	r28
     12c:	cd b7       	in	r28, 0x3d	; 61
     12e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
     130:	80 91 70 00 	lds	r24, 0x0070
     134:	90 91 71 00 	lds	r25, 0x0071
     138:	00 97       	sbiw	r24, 0x00	; 0
     13a:	29 f0       	breq	.+10     	; 0x146 <__vector_9+0x40>
	{
		(*g_callBackPtr)();
     13c:	e0 91 70 00 	lds	r30, 0x0070
     140:	f0 91 71 00 	lds	r31, 0x0071
     144:	09 95       	icall
	}
}
     146:	cf 91       	pop	r28
     148:	df 91       	pop	r29
     14a:	ff 91       	pop	r31
     14c:	ef 91       	pop	r30
     14e:	bf 91       	pop	r27
     150:	af 91       	pop	r26
     152:	9f 91       	pop	r25
     154:	8f 91       	pop	r24
     156:	7f 91       	pop	r23
     158:	6f 91       	pop	r22
     15a:	5f 91       	pop	r21
     15c:	4f 91       	pop	r20
     15e:	3f 91       	pop	r19
     160:	2f 91       	pop	r18
     162:	0f 90       	pop	r0
     164:	0f be       	out	0x3f, r0	; 63
     166:	0f 90       	pop	r0
     168:	1f 90       	pop	r1
     16a:	18 95       	reti

0000016c <Timer1_init>:
/*
 * Description :
 * Function to initialize the Timer driver.
 */
Timer1_FunctionState Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
     16c:	df 93       	push	r29
     16e:	cf 93       	push	r28
     170:	00 d0       	rcall	.+0      	; 0x172 <Timer1_init+0x6>
     172:	00 d0       	rcall	.+0      	; 0x174 <Timer1_init+0x8>
     174:	0f 92       	push	r0
     176:	cd b7       	in	r28, 0x3d	; 61
     178:	de b7       	in	r29, 0x3e	; 62
     17a:	9a 83       	std	Y+2, r25	; 0x02
     17c:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->mode>1 || Config_Ptr->prescaler == 0 || Config_Ptr->prescaler >5)
     17e:	e9 81       	ldd	r30, Y+1	; 0x01
     180:	fa 81       	ldd	r31, Y+2	; 0x02
     182:	85 81       	ldd	r24, Z+5	; 0x05
     184:	82 30       	cpi	r24, 0x02	; 2
     186:	50 f4       	brcc	.+20     	; 0x19c <Timer1_init+0x30>
     188:	e9 81       	ldd	r30, Y+1	; 0x01
     18a:	fa 81       	ldd	r31, Y+2	; 0x02
     18c:	84 81       	ldd	r24, Z+4	; 0x04
     18e:	88 23       	and	r24, r24
     190:	29 f0       	breq	.+10     	; 0x19c <Timer1_init+0x30>
     192:	e9 81       	ldd	r30, Y+1	; 0x01
     194:	fa 81       	ldd	r31, Y+2	; 0x02
     196:	84 81       	ldd	r24, Z+4	; 0x04
     198:	86 30       	cpi	r24, 0x06	; 6
     19a:	10 f0       	brcs	.+4      	; 0x1a0 <Timer1_init+0x34>
	{
		return TIMER1_ERROR;
     19c:	1d 82       	std	Y+5, r1	; 0x05
     19e:	4f c0       	rjmp	.+158    	; 0x23e <Timer1_init+0xd2>
	}
	else
	{
		switch (Config_Ptr->mode)
     1a0:	e9 81       	ldd	r30, Y+1	; 0x01
     1a2:	fa 81       	ldd	r31, Y+2	; 0x02
     1a4:	85 81       	ldd	r24, Z+5	; 0x05
     1a6:	28 2f       	mov	r18, r24
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	3c 83       	std	Y+4, r19	; 0x04
     1ac:	2b 83       	std	Y+3, r18	; 0x03
     1ae:	8b 81       	ldd	r24, Y+3	; 0x03
     1b0:	9c 81       	ldd	r25, Y+4	; 0x04
     1b2:	00 97       	sbiw	r24, 0x00	; 0
     1b4:	31 f0       	breq	.+12     	; 0x1c2 <Timer1_init+0x56>
     1b6:	2b 81       	ldd	r18, Y+3	; 0x03
     1b8:	3c 81       	ldd	r19, Y+4	; 0x04
     1ba:	21 30       	cpi	r18, 0x01	; 1
     1bc:	31 05       	cpc	r19, r1
     1be:	e1 f0       	breq	.+56     	; 0x1f8 <Timer1_init+0x8c>
     1c0:	3c c0       	rjmp	.+120    	; 0x23a <Timer1_init+0xce>
		{
		case TIMER1_NORMAL_MODE:
			/*
			 * FOC1A=1 , FOC1B=1  ----> NON-PWM
			 */
			TCCR1A=(1<<FOC1A)|(1<<FOC1B);
     1c2:	ef e4       	ldi	r30, 0x4F	; 79
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	8c e0       	ldi	r24, 0x0C	; 12
     1c8:	80 83       	st	Z, r24

			/*Assign initial value to TCNT1*/
			TCNT1=Config_Ptr->initial_value;
     1ca:	ac e4       	ldi	r26, 0x4C	; 76
     1cc:	b0 e0       	ldi	r27, 0x00	; 0
     1ce:	e9 81       	ldd	r30, Y+1	; 0x01
     1d0:	fa 81       	ldd	r31, Y+2	; 0x02
     1d2:	80 81       	ld	r24, Z
     1d4:	91 81       	ldd	r25, Z+1	; 0x01
     1d6:	11 96       	adiw	r26, 0x01	; 1
     1d8:	9c 93       	st	X, r25
     1da:	8e 93       	st	-X, r24

			/*Enable Overflow mode interrupt*/
			TIMSK|=(1<<TOIE1);
     1dc:	a9 e5       	ldi	r26, 0x59	; 89
     1de:	b0 e0       	ldi	r27, 0x00	; 0
     1e0:	e9 e5       	ldi	r30, 0x59	; 89
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	80 81       	ld	r24, Z
     1e6:	84 60       	ori	r24, 0x04	; 4
     1e8:	8c 93       	st	X, r24

			/*Set the clock prescaler and start the timer*/
			TCCR1B=(Config_Ptr->prescaler<<CS10);
     1ea:	ae e4       	ldi	r26, 0x4E	; 78
     1ec:	b0 e0       	ldi	r27, 0x00	; 0
     1ee:	e9 81       	ldd	r30, Y+1	; 0x01
     1f0:	fa 81       	ldd	r31, Y+2	; 0x02
     1f2:	84 81       	ldd	r24, Z+4	; 0x04
     1f4:	8c 93       	st	X, r24
     1f6:	21 c0       	rjmp	.+66     	; 0x23a <Timer1_init+0xce>
			break;
		case TIMER1_COMPARE_MODE:
			/*
			 * FOC1A=1 , FOC1B=1  ----> NON-PWM
			 */
			TCCR1A=(1<<FOC1A)|(1<<FOC1B);
     1f8:	ef e4       	ldi	r30, 0x4F	; 79
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	8c e0       	ldi	r24, 0x0C	; 12
     1fe:	80 83       	st	Z, r24

			/*Assign the compare match value to OCR1A*/
			OCR1A=Config_Ptr->compare_value;
     200:	aa e4       	ldi	r26, 0x4A	; 74
     202:	b0 e0       	ldi	r27, 0x00	; 0
     204:	e9 81       	ldd	r30, Y+1	; 0x01
     206:	fa 81       	ldd	r31, Y+2	; 0x02
     208:	82 81       	ldd	r24, Z+2	; 0x02
     20a:	93 81       	ldd	r25, Z+3	; 0x03
     20c:	11 96       	adiw	r26, 0x01	; 1
     20e:	9c 93       	st	X, r25
     210:	8e 93       	st	-X, r24

			/*Assign initial value to TCNT1*/
			TCNT1=Config_Ptr->initial_value;
     212:	ac e4       	ldi	r26, 0x4C	; 76
     214:	b0 e0       	ldi	r27, 0x00	; 0
     216:	e9 81       	ldd	r30, Y+1	; 0x01
     218:	fa 81       	ldd	r31, Y+2	; 0x02
     21a:	80 81       	ld	r24, Z
     21c:	91 81       	ldd	r25, Z+1	; 0x01
     21e:	11 96       	adiw	r26, 0x01	; 1
     220:	9c 93       	st	X, r25
     222:	8e 93       	st	-X, r24

			/*Enable compare mode interrupt*/
			TIMSK=(1<<OCIE1A);
     224:	e9 e5       	ldi	r30, 0x59	; 89
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 e1       	ldi	r24, 0x10	; 16
     22a:	80 83       	st	Z, r24

			/*
			 * Set the clock prescaler and start the timer.
			 * WGM12=1 --> COMPARE MODE
			 */
			TCCR1B=(Config_Ptr->prescaler<<CS10)|(1<<WGM12);
     22c:	ae e4       	ldi	r26, 0x4E	; 78
     22e:	b0 e0       	ldi	r27, 0x00	; 0
     230:	e9 81       	ldd	r30, Y+1	; 0x01
     232:	fa 81       	ldd	r31, Y+2	; 0x02
     234:	84 81       	ldd	r24, Z+4	; 0x04
     236:	88 60       	ori	r24, 0x08	; 8
     238:	8c 93       	st	X, r24
			break;
		}
		return TIMER1_SUCCESS;
     23a:	31 e0       	ldi	r19, 0x01	; 1
     23c:	3d 83       	std	Y+5, r19	; 0x05
     23e:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
     244:	0f 90       	pop	r0
     246:	0f 90       	pop	r0
     248:	0f 90       	pop	r0
     24a:	cf 91       	pop	r28
     24c:	df 91       	pop	r29
     24e:	08 95       	ret

00000250 <Timer1_deInit>:
/*
 * Description :
 * Function to disable the Timer driver.
 */
void Timer1_deInit(void)
{
     250:	df 93       	push	r29
     252:	cf 93       	push	r28
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
	/*Reset all registers*/
	TCCR1A=0;
     258:	ef e4       	ldi	r30, 0x4F	; 79
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	10 82       	st	Z, r1
	TCCR1B=0;
     25e:	ee e4       	ldi	r30, 0x4E	; 78
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	10 82       	st	Z, r1
	TIMSK&=~(1<<TOIE1)&~(1<<OCIE1A);
     264:	a9 e5       	ldi	r26, 0x59	; 89
     266:	b0 e0       	ldi	r27, 0x00	; 0
     268:	e9 e5       	ldi	r30, 0x59	; 89
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	8b 7e       	andi	r24, 0xEB	; 235
     270:	8c 93       	st	X, r24
	TCNT1=0;
     272:	ec e4       	ldi	r30, 0x4C	; 76
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	11 82       	std	Z+1, r1	; 0x01
     278:	10 82       	st	Z, r1
	OCR1A=0;
     27a:	ea e4       	ldi	r30, 0x4A	; 74
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	11 82       	std	Z+1, r1	; 0x01
     280:	10 82       	st	Z, r1
}
     282:	cf 91       	pop	r28
     284:	df 91       	pop	r29
     286:	08 95       	ret

00000288 <Timer1_setCallBack>:
/*
 * Description :
 * Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
     288:	df 93       	push	r29
     28a:	cf 93       	push	r28
     28c:	00 d0       	rcall	.+0      	; 0x28e <Timer1_setCallBack+0x6>
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
     292:	9a 83       	std	Y+2, r25	; 0x02
     294:	89 83       	std	Y+1, r24	; 0x01
		/*Assign the address of the call back function to the global pointer*/
		g_callBackPtr=a_ptr;
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	9a 81       	ldd	r25, Y+2	; 0x02
     29a:	90 93 71 00 	sts	0x0071, r25
     29e:	80 93 70 00 	sts	0x0070, r24
}
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	cf 91       	pop	r28
     2a8:	df 91       	pop	r29
     2aa:	08 95       	ret

000002ac <__vector_10>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
/*ISR for the compare mode*/
ISR(TIMER0_COMP_vect)
{
     2ac:	1f 92       	push	r1
     2ae:	0f 92       	push	r0
     2b0:	0f b6       	in	r0, 0x3f	; 63
     2b2:	0f 92       	push	r0
     2b4:	11 24       	eor	r1, r1
     2b6:	2f 93       	push	r18
     2b8:	3f 93       	push	r19
     2ba:	4f 93       	push	r20
     2bc:	5f 93       	push	r21
     2be:	6f 93       	push	r22
     2c0:	7f 93       	push	r23
     2c2:	8f 93       	push	r24
     2c4:	9f 93       	push	r25
     2c6:	af 93       	push	r26
     2c8:	bf 93       	push	r27
     2ca:	ef 93       	push	r30
     2cc:	ff 93       	push	r31
     2ce:	df 93       	push	r29
     2d0:	cf 93       	push	r28
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
     2d6:	80 91 72 00 	lds	r24, 0x0072
     2da:	90 91 73 00 	lds	r25, 0x0073
     2de:	00 97       	sbiw	r24, 0x00	; 0
     2e0:	29 f0       	breq	.+10     	; 0x2ec <__vector_10+0x40>
	{
		(*g_callBackPtr)();
     2e2:	e0 91 72 00 	lds	r30, 0x0072
     2e6:	f0 91 73 00 	lds	r31, 0x0073
     2ea:	09 95       	icall
	}
}
     2ec:	cf 91       	pop	r28
     2ee:	df 91       	pop	r29
     2f0:	ff 91       	pop	r31
     2f2:	ef 91       	pop	r30
     2f4:	bf 91       	pop	r27
     2f6:	af 91       	pop	r26
     2f8:	9f 91       	pop	r25
     2fa:	8f 91       	pop	r24
     2fc:	7f 91       	pop	r23
     2fe:	6f 91       	pop	r22
     300:	5f 91       	pop	r21
     302:	4f 91       	pop	r20
     304:	3f 91       	pop	r19
     306:	2f 91       	pop	r18
     308:	0f 90       	pop	r0
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	0f 90       	pop	r0
     30e:	1f 90       	pop	r1
     310:	18 95       	reti

00000312 <__vector_11>:

/*ISR for the overflow mode*/
ISR(TIMER0_OVF_vect)
{
     312:	1f 92       	push	r1
     314:	0f 92       	push	r0
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	0f 92       	push	r0
     31a:	11 24       	eor	r1, r1
     31c:	2f 93       	push	r18
     31e:	3f 93       	push	r19
     320:	4f 93       	push	r20
     322:	5f 93       	push	r21
     324:	6f 93       	push	r22
     326:	7f 93       	push	r23
     328:	8f 93       	push	r24
     32a:	9f 93       	push	r25
     32c:	af 93       	push	r26
     32e:	bf 93       	push	r27
     330:	ef 93       	push	r30
     332:	ff 93       	push	r31
     334:	df 93       	push	r29
     336:	cf 93       	push	r28
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR)
     33c:	80 91 72 00 	lds	r24, 0x0072
     340:	90 91 73 00 	lds	r25, 0x0073
     344:	00 97       	sbiw	r24, 0x00	; 0
     346:	29 f0       	breq	.+10     	; 0x352 <__vector_11+0x40>
	{
		(*g_callBackPtr)();
     348:	e0 91 72 00 	lds	r30, 0x0072
     34c:	f0 91 73 00 	lds	r31, 0x0073
     350:	09 95       	icall
	}
}
     352:	cf 91       	pop	r28
     354:	df 91       	pop	r29
     356:	ff 91       	pop	r31
     358:	ef 91       	pop	r30
     35a:	bf 91       	pop	r27
     35c:	af 91       	pop	r26
     35e:	9f 91       	pop	r25
     360:	8f 91       	pop	r24
     362:	7f 91       	pop	r23
     364:	6f 91       	pop	r22
     366:	5f 91       	pop	r21
     368:	4f 91       	pop	r20
     36a:	3f 91       	pop	r19
     36c:	2f 91       	pop	r18
     36e:	0f 90       	pop	r0
     370:	0f be       	out	0x3f, r0	; 63
     372:	0f 90       	pop	r0
     374:	1f 90       	pop	r1
     376:	18 95       	reti

00000378 <Timer0_init>:
/*
 * Description :
 * Function to initialize the Timer driver.
 */
Timer0_FunctionState Timer0_init(const Timer0_ConfigType * Config_Ptr)
{
     378:	df 93       	push	r29
     37a:	cf 93       	push	r28
     37c:	00 d0       	rcall	.+0      	; 0x37e <Timer0_init+0x6>
     37e:	00 d0       	rcall	.+0      	; 0x380 <Timer0_init+0x8>
     380:	0f 92       	push	r0
     382:	cd b7       	in	r28, 0x3d	; 61
     384:	de b7       	in	r29, 0x3e	; 62
     386:	9a 83       	std	Y+2, r25	; 0x02
     388:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->mode>1 || Config_Ptr->prescaler == 0 || Config_Ptr->prescaler >5)
     38a:	e9 81       	ldd	r30, Y+1	; 0x01
     38c:	fa 81       	ldd	r31, Y+2	; 0x02
     38e:	85 81       	ldd	r24, Z+5	; 0x05
     390:	82 30       	cpi	r24, 0x02	; 2
     392:	50 f4       	brcc	.+20     	; 0x3a8 <Timer0_init+0x30>
     394:	e9 81       	ldd	r30, Y+1	; 0x01
     396:	fa 81       	ldd	r31, Y+2	; 0x02
     398:	84 81       	ldd	r24, Z+4	; 0x04
     39a:	88 23       	and	r24, r24
     39c:	29 f0       	breq	.+10     	; 0x3a8 <Timer0_init+0x30>
     39e:	e9 81       	ldd	r30, Y+1	; 0x01
     3a0:	fa 81       	ldd	r31, Y+2	; 0x02
     3a2:	84 81       	ldd	r24, Z+4	; 0x04
     3a4:	86 30       	cpi	r24, 0x06	; 6
     3a6:	10 f0       	brcs	.+4      	; 0x3ac <Timer0_init+0x34>
	{
		return TIMER0_ERROR;
     3a8:	1d 82       	std	Y+5, r1	; 0x05
     3aa:	48 c0       	rjmp	.+144    	; 0x43c <Timer0_init+0xc4>
	}
	else
	{
		switch (Config_Ptr->mode)
     3ac:	e9 81       	ldd	r30, Y+1	; 0x01
     3ae:	fa 81       	ldd	r31, Y+2	; 0x02
     3b0:	85 81       	ldd	r24, Z+5	; 0x05
     3b2:	28 2f       	mov	r18, r24
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	3c 83       	std	Y+4, r19	; 0x04
     3b8:	2b 83       	std	Y+3, r18	; 0x03
     3ba:	8b 81       	ldd	r24, Y+3	; 0x03
     3bc:	9c 81       	ldd	r25, Y+4	; 0x04
     3be:	00 97       	sbiw	r24, 0x00	; 0
     3c0:	31 f0       	breq	.+12     	; 0x3ce <Timer0_init+0x56>
     3c2:	2b 81       	ldd	r18, Y+3	; 0x03
     3c4:	3c 81       	ldd	r19, Y+4	; 0x04
     3c6:	21 30       	cpi	r18, 0x01	; 1
     3c8:	31 05       	cpc	r19, r1
     3ca:	d1 f0       	breq	.+52     	; 0x400 <Timer0_init+0x88>
     3cc:	35 c0       	rjmp	.+106    	; 0x438 <Timer0_init+0xc0>
		{
		case TIMER0_NORMAL_MODE:
			/*
			 * FOC0=1  ----> NON-PWM
			 */
			TCCR0=(1<<FOC0);
     3ce:	e3 e5       	ldi	r30, 0x53	; 83
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	80 e8       	ldi	r24, 0x80	; 128
     3d4:	80 83       	st	Z, r24

			/*Assign initial value to TCNT0*/
			TCNT0=Config_Ptr->initial_value;
     3d6:	a2 e5       	ldi	r26, 0x52	; 82
     3d8:	b0 e0       	ldi	r27, 0x00	; 0
     3da:	e9 81       	ldd	r30, Y+1	; 0x01
     3dc:	fa 81       	ldd	r31, Y+2	; 0x02
     3de:	80 81       	ld	r24, Z
     3e0:	91 81       	ldd	r25, Z+1	; 0x01
     3e2:	8c 93       	st	X, r24

			/*Enable Overflow mode interrupt*/
			TIMSK|=(1<<TOIE0);
     3e4:	a9 e5       	ldi	r26, 0x59	; 89
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e9 e5       	ldi	r30, 0x59	; 89
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	80 81       	ld	r24, Z
     3ee:	81 60       	ori	r24, 0x01	; 1
     3f0:	8c 93       	st	X, r24

			/*Set the clock prescaler and start the timer*/
			TCCR0=(Config_Ptr->prescaler<<CS00);
     3f2:	a3 e5       	ldi	r26, 0x53	; 83
     3f4:	b0 e0       	ldi	r27, 0x00	; 0
     3f6:	e9 81       	ldd	r30, Y+1	; 0x01
     3f8:	fa 81       	ldd	r31, Y+2	; 0x02
     3fa:	84 81       	ldd	r24, Z+4	; 0x04
     3fc:	8c 93       	st	X, r24
     3fe:	1c c0       	rjmp	.+56     	; 0x438 <Timer0_init+0xc0>
			break;
		case TIMER0_COMPARE_MODE:
			/*
			 * FOC0=1  ----> NON-PWM
			 */
			TCCR0=(1<<FOC0)|(1<<WGM01);
     400:	e3 e5       	ldi	r30, 0x53	; 83
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	88 e8       	ldi	r24, 0x88	; 136
     406:	80 83       	st	Z, r24

			/*Assign the compare match value to OCR0*/
			OCR0=Config_Ptr->compare_value;
     408:	ac e5       	ldi	r26, 0x5C	; 92
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	e9 81       	ldd	r30, Y+1	; 0x01
     40e:	fa 81       	ldd	r31, Y+2	; 0x02
     410:	82 81       	ldd	r24, Z+2	; 0x02
     412:	93 81       	ldd	r25, Z+3	; 0x03
     414:	8c 93       	st	X, r24

			/*Assign initial value to TCNT0*/
			TCNT0=Config_Ptr->initial_value;
     416:	a2 e5       	ldi	r26, 0x52	; 82
     418:	b0 e0       	ldi	r27, 0x00	; 0
     41a:	e9 81       	ldd	r30, Y+1	; 0x01
     41c:	fa 81       	ldd	r31, Y+2	; 0x02
     41e:	80 81       	ld	r24, Z
     420:	91 81       	ldd	r25, Z+1	; 0x01
     422:	8c 93       	st	X, r24

			/*Enable compare mode interrupt*/
			TIMSK=(1<<OCIE0);
     424:	e9 e5       	ldi	r30, 0x59	; 89
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	80 83       	st	Z, r24

			/*
			 * Set the clock prescaler and start the timer.
			 */
			TCCR0=(Config_Ptr->prescaler<<CS00);
     42c:	a3 e5       	ldi	r26, 0x53	; 83
     42e:	b0 e0       	ldi	r27, 0x00	; 0
     430:	e9 81       	ldd	r30, Y+1	; 0x01
     432:	fa 81       	ldd	r31, Y+2	; 0x02
     434:	84 81       	ldd	r24, Z+4	; 0x04
     436:	8c 93       	st	X, r24
			break;
		}
		return TIMER0_SUCCESS;
     438:	31 e0       	ldi	r19, 0x01	; 1
     43a:	3d 83       	std	Y+5, r19	; 0x05
     43c:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
     448:	cf 91       	pop	r28
     44a:	df 91       	pop	r29
     44c:	08 95       	ret

0000044e <Timer0_deInit>:
/*
 * Description :
 * Function to disable the Timer driver.
 */
void Timer0_deInit(void)
{
     44e:	df 93       	push	r29
     450:	cf 93       	push	r28
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
	/*Reset all registers*/
	TCCR0=0;
     456:	e3 e5       	ldi	r30, 0x53	; 83
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	10 82       	st	Z, r1
	TIMSK&=~(1<<TOIE0)&~(1<<OCIE0);
     45c:	a9 e5       	ldi	r26, 0x59	; 89
     45e:	b0 e0       	ldi	r27, 0x00	; 0
     460:	e9 e5       	ldi	r30, 0x59	; 89
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	80 81       	ld	r24, Z
     466:	8c 7f       	andi	r24, 0xFC	; 252
     468:	8c 93       	st	X, r24
	TCNT0=0;
     46a:	e2 e5       	ldi	r30, 0x52	; 82
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	10 82       	st	Z, r1
	OCR0=0;
     470:	ec e5       	ldi	r30, 0x5C	; 92
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	10 82       	st	Z, r1
}
     476:	cf 91       	pop	r28
     478:	df 91       	pop	r29
     47a:	08 95       	ret

0000047c <Timer0_setCallBack>:
/*
 * Description :
 * Function to set the Call Back function address.
 */
void Timer0_setCallBack(void(*a_ptr)(void))
{
     47c:	df 93       	push	r29
     47e:	cf 93       	push	r28
     480:	00 d0       	rcall	.+0      	; 0x482 <Timer0_setCallBack+0x6>
     482:	cd b7       	in	r28, 0x3d	; 61
     484:	de b7       	in	r29, 0x3e	; 62
     486:	9a 83       	std	Y+2, r25	; 0x02
     488:	89 83       	std	Y+1, r24	; 0x01
		/*Assign the address of the call back function to the global pointer*/
		g_callBackPtr=a_ptr;
     48a:	89 81       	ldd	r24, Y+1	; 0x01
     48c:	9a 81       	ldd	r25, Y+2	; 0x02
     48e:	90 93 73 00 	sts	0x0073, r25
     492:	80 93 72 00 	sts	0x0072, r24
}
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	cf 91       	pop	r28
     49c:	df 91       	pop	r29
     49e:	08 95       	ret

000004a0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
GPIO_FunctionState GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     4a0:	df 93       	push	r29
     4a2:	cf 93       	push	r28
     4a4:	00 d0       	rcall	.+0      	; 0x4a6 <GPIO_setupPinDirection+0x6>
     4a6:	00 d0       	rcall	.+0      	; 0x4a8 <GPIO_setupPinDirection+0x8>
     4a8:	00 d0       	rcall	.+0      	; 0x4aa <GPIO_setupPinDirection+0xa>
     4aa:	cd b7       	in	r28, 0x3d	; 61
     4ac:	de b7       	in	r29, 0x3e	; 62
     4ae:	89 83       	std	Y+1, r24	; 0x01
     4b0:	6a 83       	std	Y+2, r22	; 0x02
     4b2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     4b4:	8a 81       	ldd	r24, Y+2	; 0x02
     4b6:	88 30       	cpi	r24, 0x08	; 8
     4b8:	18 f4       	brcc	.+6      	; 0x4c0 <GPIO_setupPinDirection+0x20>
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
     4bc:	84 30       	cpi	r24, 0x04	; 4
     4be:	10 f0       	brcs	.+4      	; 0x4c4 <GPIO_setupPinDirection+0x24>
	{
		/* Do Nothing */
		return GPIO_ERROR;
     4c0:	1e 82       	std	Y+6, r1	; 0x06
     4c2:	d3 c0       	rjmp	.+422    	; 0x66a <GPIO_setupPinDirection+0x1ca>
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     4c4:	89 81       	ldd	r24, Y+1	; 0x01
     4c6:	28 2f       	mov	r18, r24
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	3d 83       	std	Y+5, r19	; 0x05
     4cc:	2c 83       	std	Y+4, r18	; 0x04
     4ce:	8c 81       	ldd	r24, Y+4	; 0x04
     4d0:	9d 81       	ldd	r25, Y+5	; 0x05
     4d2:	81 30       	cpi	r24, 0x01	; 1
     4d4:	91 05       	cpc	r25, r1
     4d6:	09 f4       	brne	.+2      	; 0x4da <GPIO_setupPinDirection+0x3a>
     4d8:	43 c0       	rjmp	.+134    	; 0x560 <GPIO_setupPinDirection+0xc0>
     4da:	2c 81       	ldd	r18, Y+4	; 0x04
     4dc:	3d 81       	ldd	r19, Y+5	; 0x05
     4de:	22 30       	cpi	r18, 0x02	; 2
     4e0:	31 05       	cpc	r19, r1
     4e2:	2c f4       	brge	.+10     	; 0x4ee <GPIO_setupPinDirection+0x4e>
     4e4:	8c 81       	ldd	r24, Y+4	; 0x04
     4e6:	9d 81       	ldd	r25, Y+5	; 0x05
     4e8:	00 97       	sbiw	r24, 0x00	; 0
     4ea:	71 f0       	breq	.+28     	; 0x508 <GPIO_setupPinDirection+0x68>
     4ec:	bc c0       	rjmp	.+376    	; 0x666 <GPIO_setupPinDirection+0x1c6>
     4ee:	2c 81       	ldd	r18, Y+4	; 0x04
     4f0:	3d 81       	ldd	r19, Y+5	; 0x05
     4f2:	22 30       	cpi	r18, 0x02	; 2
     4f4:	31 05       	cpc	r19, r1
     4f6:	09 f4       	brne	.+2      	; 0x4fa <GPIO_setupPinDirection+0x5a>
     4f8:	5f c0       	rjmp	.+190    	; 0x5b8 <GPIO_setupPinDirection+0x118>
     4fa:	8c 81       	ldd	r24, Y+4	; 0x04
     4fc:	9d 81       	ldd	r25, Y+5	; 0x05
     4fe:	83 30       	cpi	r24, 0x03	; 3
     500:	91 05       	cpc	r25, r1
     502:	09 f4       	brne	.+2      	; 0x506 <GPIO_setupPinDirection+0x66>
     504:	85 c0       	rjmp	.+266    	; 0x610 <GPIO_setupPinDirection+0x170>
     506:	af c0       	rjmp	.+350    	; 0x666 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     508:	8b 81       	ldd	r24, Y+3	; 0x03
     50a:	81 30       	cpi	r24, 0x01	; 1
     50c:	a1 f4       	brne	.+40     	; 0x536 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     50e:	aa e3       	ldi	r26, 0x3A	; 58
     510:	b0 e0       	ldi	r27, 0x00	; 0
     512:	ea e3       	ldi	r30, 0x3A	; 58
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	80 81       	ld	r24, Z
     518:	48 2f       	mov	r20, r24
     51a:	8a 81       	ldd	r24, Y+2	; 0x02
     51c:	28 2f       	mov	r18, r24
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	02 2e       	mov	r0, r18
     526:	02 c0       	rjmp	.+4      	; 0x52c <GPIO_setupPinDirection+0x8c>
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	0a 94       	dec	r0
     52e:	e2 f7       	brpl	.-8      	; 0x528 <GPIO_setupPinDirection+0x88>
     530:	84 2b       	or	r24, r20
     532:	8c 93       	st	X, r24
     534:	98 c0       	rjmp	.+304    	; 0x666 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     536:	aa e3       	ldi	r26, 0x3A	; 58
     538:	b0 e0       	ldi	r27, 0x00	; 0
     53a:	ea e3       	ldi	r30, 0x3A	; 58
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	80 81       	ld	r24, Z
     540:	48 2f       	mov	r20, r24
     542:	8a 81       	ldd	r24, Y+2	; 0x02
     544:	28 2f       	mov	r18, r24
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	02 2e       	mov	r0, r18
     54e:	02 c0       	rjmp	.+4      	; 0x554 <GPIO_setupPinDirection+0xb4>
     550:	88 0f       	add	r24, r24
     552:	99 1f       	adc	r25, r25
     554:	0a 94       	dec	r0
     556:	e2 f7       	brpl	.-8      	; 0x550 <GPIO_setupPinDirection+0xb0>
     558:	80 95       	com	r24
     55a:	84 23       	and	r24, r20
     55c:	8c 93       	st	X, r24
     55e:	83 c0       	rjmp	.+262    	; 0x666 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     560:	8b 81       	ldd	r24, Y+3	; 0x03
     562:	81 30       	cpi	r24, 0x01	; 1
     564:	a1 f4       	brne	.+40     	; 0x58e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     566:	a7 e3       	ldi	r26, 0x37	; 55
     568:	b0 e0       	ldi	r27, 0x00	; 0
     56a:	e7 e3       	ldi	r30, 0x37	; 55
     56c:	f0 e0       	ldi	r31, 0x00	; 0
     56e:	80 81       	ld	r24, Z
     570:	48 2f       	mov	r20, r24
     572:	8a 81       	ldd	r24, Y+2	; 0x02
     574:	28 2f       	mov	r18, r24
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	02 2e       	mov	r0, r18
     57e:	02 c0       	rjmp	.+4      	; 0x584 <GPIO_setupPinDirection+0xe4>
     580:	88 0f       	add	r24, r24
     582:	99 1f       	adc	r25, r25
     584:	0a 94       	dec	r0
     586:	e2 f7       	brpl	.-8      	; 0x580 <GPIO_setupPinDirection+0xe0>
     588:	84 2b       	or	r24, r20
     58a:	8c 93       	st	X, r24
     58c:	6c c0       	rjmp	.+216    	; 0x666 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     58e:	a7 e3       	ldi	r26, 0x37	; 55
     590:	b0 e0       	ldi	r27, 0x00	; 0
     592:	e7 e3       	ldi	r30, 0x37	; 55
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	80 81       	ld	r24, Z
     598:	48 2f       	mov	r20, r24
     59a:	8a 81       	ldd	r24, Y+2	; 0x02
     59c:	28 2f       	mov	r18, r24
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	02 2e       	mov	r0, r18
     5a6:	02 c0       	rjmp	.+4      	; 0x5ac <GPIO_setupPinDirection+0x10c>
     5a8:	88 0f       	add	r24, r24
     5aa:	99 1f       	adc	r25, r25
     5ac:	0a 94       	dec	r0
     5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <GPIO_setupPinDirection+0x108>
     5b0:	80 95       	com	r24
     5b2:	84 23       	and	r24, r20
     5b4:	8c 93       	st	X, r24
     5b6:	57 c0       	rjmp	.+174    	; 0x666 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     5b8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ba:	81 30       	cpi	r24, 0x01	; 1
     5bc:	a1 f4       	brne	.+40     	; 0x5e6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     5be:	a4 e3       	ldi	r26, 0x34	; 52
     5c0:	b0 e0       	ldi	r27, 0x00	; 0
     5c2:	e4 e3       	ldi	r30, 0x34	; 52
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	80 81       	ld	r24, Z
     5c8:	48 2f       	mov	r20, r24
     5ca:	8a 81       	ldd	r24, Y+2	; 0x02
     5cc:	28 2f       	mov	r18, r24
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	02 2e       	mov	r0, r18
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <GPIO_setupPinDirection+0x13c>
     5d8:	88 0f       	add	r24, r24
     5da:	99 1f       	adc	r25, r25
     5dc:	0a 94       	dec	r0
     5de:	e2 f7       	brpl	.-8      	; 0x5d8 <GPIO_setupPinDirection+0x138>
     5e0:	84 2b       	or	r24, r20
     5e2:	8c 93       	st	X, r24
     5e4:	40 c0       	rjmp	.+128    	; 0x666 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     5e6:	a4 e3       	ldi	r26, 0x34	; 52
     5e8:	b0 e0       	ldi	r27, 0x00	; 0
     5ea:	e4 e3       	ldi	r30, 0x34	; 52
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	48 2f       	mov	r20, r24
     5f2:	8a 81       	ldd	r24, Y+2	; 0x02
     5f4:	28 2f       	mov	r18, r24
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	02 2e       	mov	r0, r18
     5fe:	02 c0       	rjmp	.+4      	; 0x604 <GPIO_setupPinDirection+0x164>
     600:	88 0f       	add	r24, r24
     602:	99 1f       	adc	r25, r25
     604:	0a 94       	dec	r0
     606:	e2 f7       	brpl	.-8      	; 0x600 <GPIO_setupPinDirection+0x160>
     608:	80 95       	com	r24
     60a:	84 23       	and	r24, r20
     60c:	8c 93       	st	X, r24
     60e:	2b c0       	rjmp	.+86     	; 0x666 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     610:	8b 81       	ldd	r24, Y+3	; 0x03
     612:	81 30       	cpi	r24, 0x01	; 1
     614:	a1 f4       	brne	.+40     	; 0x63e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     616:	a1 e3       	ldi	r26, 0x31	; 49
     618:	b0 e0       	ldi	r27, 0x00	; 0
     61a:	e1 e3       	ldi	r30, 0x31	; 49
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	80 81       	ld	r24, Z
     620:	48 2f       	mov	r20, r24
     622:	8a 81       	ldd	r24, Y+2	; 0x02
     624:	28 2f       	mov	r18, r24
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	02 2e       	mov	r0, r18
     62e:	02 c0       	rjmp	.+4      	; 0x634 <GPIO_setupPinDirection+0x194>
     630:	88 0f       	add	r24, r24
     632:	99 1f       	adc	r25, r25
     634:	0a 94       	dec	r0
     636:	e2 f7       	brpl	.-8      	; 0x630 <GPIO_setupPinDirection+0x190>
     638:	84 2b       	or	r24, r20
     63a:	8c 93       	st	X, r24
     63c:	14 c0       	rjmp	.+40     	; 0x666 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     63e:	a1 e3       	ldi	r26, 0x31	; 49
     640:	b0 e0       	ldi	r27, 0x00	; 0
     642:	e1 e3       	ldi	r30, 0x31	; 49
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	80 81       	ld	r24, Z
     648:	48 2f       	mov	r20, r24
     64a:	8a 81       	ldd	r24, Y+2	; 0x02
     64c:	28 2f       	mov	r18, r24
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	02 2e       	mov	r0, r18
     656:	02 c0       	rjmp	.+4      	; 0x65c <GPIO_setupPinDirection+0x1bc>
     658:	88 0f       	add	r24, r24
     65a:	99 1f       	adc	r25, r25
     65c:	0a 94       	dec	r0
     65e:	e2 f7       	brpl	.-8      	; 0x658 <GPIO_setupPinDirection+0x1b8>
     660:	80 95       	com	r24
     662:	84 23       	and	r24, r20
     664:	8c 93       	st	X, r24
			}
			break;
		}
		return GPIO_SUCCESS;
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	9e 83       	std	Y+6, r25	; 0x06
     66a:	8e 81       	ldd	r24, Y+6	; 0x06
	}
}
     66c:	26 96       	adiw	r28, 0x06	; 6
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	f8 94       	cli
     672:	de bf       	out	0x3e, r29	; 62
     674:	0f be       	out	0x3f, r0	; 63
     676:	cd bf       	out	0x3d, r28	; 61
     678:	cf 91       	pop	r28
     67a:	df 91       	pop	r29
     67c:	08 95       	ret

0000067e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
GPIO_FunctionState GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     67e:	df 93       	push	r29
     680:	cf 93       	push	r28
     682:	00 d0       	rcall	.+0      	; 0x684 <GPIO_writePin+0x6>
     684:	00 d0       	rcall	.+0      	; 0x686 <GPIO_writePin+0x8>
     686:	00 d0       	rcall	.+0      	; 0x688 <GPIO_writePin+0xa>
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62
     68c:	89 83       	std	Y+1, r24	; 0x01
     68e:	6a 83       	std	Y+2, r22	; 0x02
     690:	4b 83       	std	Y+3, r20	; 0x03

	if(pin_num > NUM_OF_PINS_PER_PORT || port_num > NUM_OF_PORTS)
     692:	8a 81       	ldd	r24, Y+2	; 0x02
     694:	89 30       	cpi	r24, 0x09	; 9
     696:	18 f4       	brcc	.+6      	; 0x69e <GPIO_writePin+0x20>
     698:	89 81       	ldd	r24, Y+1	; 0x01
     69a:	85 30       	cpi	r24, 0x05	; 5
     69c:	10 f0       	brcs	.+4      	; 0x6a2 <GPIO_writePin+0x24>
	{
		return GPIO_ERROR;
     69e:	1e 82       	std	Y+6, r1	; 0x06
     6a0:	ab c0       	rjmp	.+342    	; 0x7f8 <GPIO_writePin+0x17a>
	}
	else
	{
		switch(port_num)
     6a2:	89 81       	ldd	r24, Y+1	; 0x01
     6a4:	28 2f       	mov	r18, r24
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	3d 83       	std	Y+5, r19	; 0x05
     6aa:	2c 83       	std	Y+4, r18	; 0x04
     6ac:	6c 81       	ldd	r22, Y+4	; 0x04
     6ae:	7d 81       	ldd	r23, Y+5	; 0x05
     6b0:	61 30       	cpi	r22, 0x01	; 1
     6b2:	71 05       	cpc	r23, r1
     6b4:	d1 f1       	breq	.+116    	; 0x72a <GPIO_writePin+0xac>
     6b6:	8c 81       	ldd	r24, Y+4	; 0x04
     6b8:	9d 81       	ldd	r25, Y+5	; 0x05
     6ba:	82 30       	cpi	r24, 0x02	; 2
     6bc:	91 05       	cpc	r25, r1
     6be:	34 f4       	brge	.+12     	; 0x6cc <GPIO_writePin+0x4e>
     6c0:	2c 81       	ldd	r18, Y+4	; 0x04
     6c2:	3d 81       	ldd	r19, Y+5	; 0x05
     6c4:	21 15       	cp	r18, r1
     6c6:	31 05       	cpc	r19, r1
     6c8:	71 f0       	breq	.+28     	; 0x6e6 <GPIO_writePin+0x68>
     6ca:	94 c0       	rjmp	.+296    	; 0x7f4 <GPIO_writePin+0x176>
     6cc:	6c 81       	ldd	r22, Y+4	; 0x04
     6ce:	7d 81       	ldd	r23, Y+5	; 0x05
     6d0:	62 30       	cpi	r22, 0x02	; 2
     6d2:	71 05       	cpc	r23, r1
     6d4:	09 f4       	brne	.+2      	; 0x6d8 <GPIO_writePin+0x5a>
     6d6:	4b c0       	rjmp	.+150    	; 0x76e <GPIO_writePin+0xf0>
     6d8:	8c 81       	ldd	r24, Y+4	; 0x04
     6da:	9d 81       	ldd	r25, Y+5	; 0x05
     6dc:	83 30       	cpi	r24, 0x03	; 3
     6de:	91 05       	cpc	r25, r1
     6e0:	09 f4       	brne	.+2      	; 0x6e4 <GPIO_writePin+0x66>
     6e2:	67 c0       	rjmp	.+206    	; 0x7b2 <GPIO_writePin+0x134>
     6e4:	87 c0       	rjmp	.+270    	; 0x7f4 <GPIO_writePin+0x176>
		{
		case PORTA_ID:
			PORTA=(PORTA&~(1<<pin_num))|(value<<pin_num);
     6e6:	ab e3       	ldi	r26, 0x3B	; 59
     6e8:	b0 e0       	ldi	r27, 0x00	; 0
     6ea:	eb e3       	ldi	r30, 0x3B	; 59
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	80 81       	ld	r24, Z
     6f0:	48 2f       	mov	r20, r24
     6f2:	8a 81       	ldd	r24, Y+2	; 0x02
     6f4:	28 2f       	mov	r18, r24
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	02 c0       	rjmp	.+4      	; 0x702 <GPIO_writePin+0x84>
     6fe:	88 0f       	add	r24, r24
     700:	99 1f       	adc	r25, r25
     702:	2a 95       	dec	r18
     704:	e2 f7       	brpl	.-8      	; 0x6fe <GPIO_writePin+0x80>
     706:	80 95       	com	r24
     708:	48 23       	and	r20, r24
     70a:	8b 81       	ldd	r24, Y+3	; 0x03
     70c:	28 2f       	mov	r18, r24
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	8a 81       	ldd	r24, Y+2	; 0x02
     712:	88 2f       	mov	r24, r24
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	b9 01       	movw	r22, r18
     718:	02 c0       	rjmp	.+4      	; 0x71e <GPIO_writePin+0xa0>
     71a:	66 0f       	add	r22, r22
     71c:	77 1f       	adc	r23, r23
     71e:	8a 95       	dec	r24
     720:	e2 f7       	brpl	.-8      	; 0x71a <GPIO_writePin+0x9c>
     722:	cb 01       	movw	r24, r22
     724:	84 2b       	or	r24, r20
     726:	8c 93       	st	X, r24
     728:	65 c0       	rjmp	.+202    	; 0x7f4 <GPIO_writePin+0x176>
			break;
		case PORTB_ID:
			PORTB=(PORTB&~(1<<pin_num))|(value<<pin_num);
     72a:	a8 e3       	ldi	r26, 0x38	; 56
     72c:	b0 e0       	ldi	r27, 0x00	; 0
     72e:	e8 e3       	ldi	r30, 0x38	; 56
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	80 81       	ld	r24, Z
     734:	48 2f       	mov	r20, r24
     736:	8a 81       	ldd	r24, Y+2	; 0x02
     738:	28 2f       	mov	r18, r24
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	02 c0       	rjmp	.+4      	; 0x746 <GPIO_writePin+0xc8>
     742:	88 0f       	add	r24, r24
     744:	99 1f       	adc	r25, r25
     746:	2a 95       	dec	r18
     748:	e2 f7       	brpl	.-8      	; 0x742 <GPIO_writePin+0xc4>
     74a:	80 95       	com	r24
     74c:	48 23       	and	r20, r24
     74e:	8b 81       	ldd	r24, Y+3	; 0x03
     750:	28 2f       	mov	r18, r24
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	8a 81       	ldd	r24, Y+2	; 0x02
     756:	88 2f       	mov	r24, r24
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	b9 01       	movw	r22, r18
     75c:	02 c0       	rjmp	.+4      	; 0x762 <GPIO_writePin+0xe4>
     75e:	66 0f       	add	r22, r22
     760:	77 1f       	adc	r23, r23
     762:	8a 95       	dec	r24
     764:	e2 f7       	brpl	.-8      	; 0x75e <GPIO_writePin+0xe0>
     766:	cb 01       	movw	r24, r22
     768:	84 2b       	or	r24, r20
     76a:	8c 93       	st	X, r24
     76c:	43 c0       	rjmp	.+134    	; 0x7f4 <GPIO_writePin+0x176>
			break;
		case PORTC_ID:
			PORTC=(PORTC&~(1<<pin_num))|(value<<pin_num);
     76e:	a5 e3       	ldi	r26, 0x35	; 53
     770:	b0 e0       	ldi	r27, 0x00	; 0
     772:	e5 e3       	ldi	r30, 0x35	; 53
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	80 81       	ld	r24, Z
     778:	48 2f       	mov	r20, r24
     77a:	8a 81       	ldd	r24, Y+2	; 0x02
     77c:	28 2f       	mov	r18, r24
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	02 c0       	rjmp	.+4      	; 0x78a <GPIO_writePin+0x10c>
     786:	88 0f       	add	r24, r24
     788:	99 1f       	adc	r25, r25
     78a:	2a 95       	dec	r18
     78c:	e2 f7       	brpl	.-8      	; 0x786 <GPIO_writePin+0x108>
     78e:	80 95       	com	r24
     790:	48 23       	and	r20, r24
     792:	8b 81       	ldd	r24, Y+3	; 0x03
     794:	28 2f       	mov	r18, r24
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	8a 81       	ldd	r24, Y+2	; 0x02
     79a:	88 2f       	mov	r24, r24
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	b9 01       	movw	r22, r18
     7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <GPIO_writePin+0x128>
     7a2:	66 0f       	add	r22, r22
     7a4:	77 1f       	adc	r23, r23
     7a6:	8a 95       	dec	r24
     7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <GPIO_writePin+0x124>
     7aa:	cb 01       	movw	r24, r22
     7ac:	84 2b       	or	r24, r20
     7ae:	8c 93       	st	X, r24
     7b0:	21 c0       	rjmp	.+66     	; 0x7f4 <GPIO_writePin+0x176>
			break;
		case PORTD_ID:
			PORTD=(PORTD&~(1<<pin_num))|(value<<pin_num);
     7b2:	a2 e3       	ldi	r26, 0x32	; 50
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	e2 e3       	ldi	r30, 0x32	; 50
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	80 81       	ld	r24, Z
     7bc:	48 2f       	mov	r20, r24
     7be:	8a 81       	ldd	r24, Y+2	; 0x02
     7c0:	28 2f       	mov	r18, r24
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	02 c0       	rjmp	.+4      	; 0x7ce <GPIO_writePin+0x150>
     7ca:	88 0f       	add	r24, r24
     7cc:	99 1f       	adc	r25, r25
     7ce:	2a 95       	dec	r18
     7d0:	e2 f7       	brpl	.-8      	; 0x7ca <GPIO_writePin+0x14c>
     7d2:	80 95       	com	r24
     7d4:	48 23       	and	r20, r24
     7d6:	8b 81       	ldd	r24, Y+3	; 0x03
     7d8:	28 2f       	mov	r18, r24
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	8a 81       	ldd	r24, Y+2	; 0x02
     7de:	88 2f       	mov	r24, r24
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	b9 01       	movw	r22, r18
     7e4:	02 c0       	rjmp	.+4      	; 0x7ea <GPIO_writePin+0x16c>
     7e6:	66 0f       	add	r22, r22
     7e8:	77 1f       	adc	r23, r23
     7ea:	8a 95       	dec	r24
     7ec:	e2 f7       	brpl	.-8      	; 0x7e6 <GPIO_writePin+0x168>
     7ee:	cb 01       	movw	r24, r22
     7f0:	84 2b       	or	r24, r20
     7f2:	8c 93       	st	X, r24
			break;

		}
		return GPIO_SUCCESS;
     7f4:	71 e0       	ldi	r23, 0x01	; 1
     7f6:	7e 83       	std	Y+6, r23	; 0x06
     7f8:	8e 81       	ldd	r24, Y+6	; 0x06
	}
}
     7fa:	26 96       	adiw	r28, 0x06	; 6
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	f8 94       	cli
     800:	de bf       	out	0x3e, r29	; 62
     802:	0f be       	out	0x3f, r0	; 63
     804:	cd bf       	out	0x3d, r28	; 61
     806:	cf 91       	pop	r28
     808:	df 91       	pop	r29
     80a:	08 95       	ret

0000080c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     80c:	df 93       	push	r29
     80e:	cf 93       	push	r28
     810:	00 d0       	rcall	.+0      	; 0x812 <GPIO_readPin+0x6>
     812:	00 d0       	rcall	.+0      	; 0x814 <GPIO_readPin+0x8>
     814:	0f 92       	push	r0
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
     81a:	8a 83       	std	Y+2, r24	; 0x02
     81c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_value=LOGIC_LOW;
     81e:	19 82       	std	Y+1, r1	; 0x01
	if(pin_num > NUM_OF_PINS_PER_PORT || port_num > NUM_OF_PORTS)
     820:	8b 81       	ldd	r24, Y+3	; 0x03
     822:	89 30       	cpi	r24, 0x09	; 9
     824:	18 f4       	brcc	.+6      	; 0x82c <GPIO_readPin+0x20>
     826:	8a 81       	ldd	r24, Y+2	; 0x02
     828:	85 30       	cpi	r24, 0x05	; 5
     82a:	10 f0       	brcs	.+4      	; 0x830 <GPIO_readPin+0x24>
	{
		a_value=LOGIC_LOW;
     82c:	19 82       	std	Y+1, r1	; 0x01
     82e:	80 c0       	rjmp	.+256    	; 0x930 <__stack+0xd1>
	}
	else
	{
		switch (port_num)
     830:	8a 81       	ldd	r24, Y+2	; 0x02
     832:	28 2f       	mov	r18, r24
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	3d 83       	std	Y+5, r19	; 0x05
     838:	2c 83       	std	Y+4, r18	; 0x04
     83a:	4c 81       	ldd	r20, Y+4	; 0x04
     83c:	5d 81       	ldd	r21, Y+5	; 0x05
     83e:	41 30       	cpi	r20, 0x01	; 1
     840:	51 05       	cpc	r21, r1
     842:	79 f1       	breq	.+94     	; 0x8a2 <__stack+0x43>
     844:	8c 81       	ldd	r24, Y+4	; 0x04
     846:	9d 81       	ldd	r25, Y+5	; 0x05
     848:	82 30       	cpi	r24, 0x02	; 2
     84a:	91 05       	cpc	r25, r1
     84c:	34 f4       	brge	.+12     	; 0x85a <GPIO_readPin+0x4e>
     84e:	2c 81       	ldd	r18, Y+4	; 0x04
     850:	3d 81       	ldd	r19, Y+5	; 0x05
     852:	21 15       	cp	r18, r1
     854:	31 05       	cpc	r19, r1
     856:	69 f0       	breq	.+26     	; 0x872 <__stack+0x13>
     858:	6b c0       	rjmp	.+214    	; 0x930 <__stack+0xd1>
     85a:	4c 81       	ldd	r20, Y+4	; 0x04
     85c:	5d 81       	ldd	r21, Y+5	; 0x05
     85e:	42 30       	cpi	r20, 0x02	; 2
     860:	51 05       	cpc	r21, r1
     862:	b9 f1       	breq	.+110    	; 0x8d2 <__stack+0x73>
     864:	8c 81       	ldd	r24, Y+4	; 0x04
     866:	9d 81       	ldd	r25, Y+5	; 0x05
     868:	83 30       	cpi	r24, 0x03	; 3
     86a:	91 05       	cpc	r25, r1
     86c:	09 f4       	brne	.+2      	; 0x870 <__stack+0x11>
     86e:	49 c0       	rjmp	.+146    	; 0x902 <__stack+0xa3>
     870:	5f c0       	rjmp	.+190    	; 0x930 <__stack+0xd1>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     872:	e9 e3       	ldi	r30, 0x39	; 57
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	80 81       	ld	r24, Z
     878:	28 2f       	mov	r18, r24
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	8b 81       	ldd	r24, Y+3	; 0x03
     87e:	88 2f       	mov	r24, r24
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	a9 01       	movw	r20, r18
     884:	02 c0       	rjmp	.+4      	; 0x88a <__stack+0x2b>
     886:	55 95       	asr	r21
     888:	47 95       	ror	r20
     88a:	8a 95       	dec	r24
     88c:	e2 f7       	brpl	.-8      	; 0x886 <__stack+0x27>
     88e:	ca 01       	movw	r24, r20
     890:	81 70       	andi	r24, 0x01	; 1
     892:	90 70       	andi	r25, 0x00	; 0
     894:	88 23       	and	r24, r24
     896:	19 f0       	breq	.+6      	; 0x89e <__stack+0x3f>
			{
				a_value=LOGIC_HIGH;
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	89 83       	std	Y+1, r24	; 0x01
     89c:	49 c0       	rjmp	.+146    	; 0x930 <__stack+0xd1>
			}
			else
			{
				a_value=LOGIC_LOW;
     89e:	19 82       	std	Y+1, r1	; 0x01
     8a0:	47 c0       	rjmp	.+142    	; 0x930 <__stack+0xd1>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     8a2:	e6 e3       	ldi	r30, 0x36	; 54
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	80 81       	ld	r24, Z
     8a8:	28 2f       	mov	r18, r24
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	8b 81       	ldd	r24, Y+3	; 0x03
     8ae:	88 2f       	mov	r24, r24
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	a9 01       	movw	r20, r18
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <__stack+0x5b>
     8b6:	55 95       	asr	r21
     8b8:	47 95       	ror	r20
     8ba:	8a 95       	dec	r24
     8bc:	e2 f7       	brpl	.-8      	; 0x8b6 <__stack+0x57>
     8be:	ca 01       	movw	r24, r20
     8c0:	81 70       	andi	r24, 0x01	; 1
     8c2:	90 70       	andi	r25, 0x00	; 0
     8c4:	88 23       	and	r24, r24
     8c6:	19 f0       	breq	.+6      	; 0x8ce <__stack+0x6f>
			{
				a_value=LOGIC_HIGH;
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	89 83       	std	Y+1, r24	; 0x01
     8cc:	31 c0       	rjmp	.+98     	; 0x930 <__stack+0xd1>
			}
			else
			{
				a_value=LOGIC_LOW;
     8ce:	19 82       	std	Y+1, r1	; 0x01
     8d0:	2f c0       	rjmp	.+94     	; 0x930 <__stack+0xd1>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     8d2:	e3 e3       	ldi	r30, 0x33	; 51
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	80 81       	ld	r24, Z
     8d8:	28 2f       	mov	r18, r24
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	8b 81       	ldd	r24, Y+3	; 0x03
     8de:	88 2f       	mov	r24, r24
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	a9 01       	movw	r20, r18
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <__stack+0x8b>
     8e6:	55 95       	asr	r21
     8e8:	47 95       	ror	r20
     8ea:	8a 95       	dec	r24
     8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <__stack+0x87>
     8ee:	ca 01       	movw	r24, r20
     8f0:	81 70       	andi	r24, 0x01	; 1
     8f2:	90 70       	andi	r25, 0x00	; 0
     8f4:	88 23       	and	r24, r24
     8f6:	19 f0       	breq	.+6      	; 0x8fe <__stack+0x9f>
			{
				a_value=LOGIC_HIGH;
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	89 83       	std	Y+1, r24	; 0x01
     8fc:	19 c0       	rjmp	.+50     	; 0x930 <__stack+0xd1>
			}
			else
			{
				a_value=LOGIC_LOW;
     8fe:	19 82       	std	Y+1, r1	; 0x01
     900:	17 c0       	rjmp	.+46     	; 0x930 <__stack+0xd1>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     902:	e0 e3       	ldi	r30, 0x30	; 48
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	80 81       	ld	r24, Z
     908:	28 2f       	mov	r18, r24
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	8b 81       	ldd	r24, Y+3	; 0x03
     90e:	88 2f       	mov	r24, r24
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	a9 01       	movw	r20, r18
     914:	02 c0       	rjmp	.+4      	; 0x91a <__stack+0xbb>
     916:	55 95       	asr	r21
     918:	47 95       	ror	r20
     91a:	8a 95       	dec	r24
     91c:	e2 f7       	brpl	.-8      	; 0x916 <__stack+0xb7>
     91e:	ca 01       	movw	r24, r20
     920:	81 70       	andi	r24, 0x01	; 1
     922:	90 70       	andi	r25, 0x00	; 0
     924:	88 23       	and	r24, r24
     926:	19 f0       	breq	.+6      	; 0x92e <__stack+0xcf>
			{
				a_value=LOGIC_HIGH;
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	89 83       	std	Y+1, r24	; 0x01
     92c:	01 c0       	rjmp	.+2      	; 0x930 <__stack+0xd1>
			}
			else
			{
				a_value=LOGIC_LOW;
     92e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;

		}
	}
	return a_value;
     930:	89 81       	ldd	r24, Y+1	; 0x01


}
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	0f 90       	pop	r0
     93a:	0f 90       	pop	r0
     93c:	cf 91       	pop	r28
     93e:	df 91       	pop	r29
     940:	08 95       	ret

00000942 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_FunctionState GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
     942:	df 93       	push	r29
     944:	cf 93       	push	r28
     946:	00 d0       	rcall	.+0      	; 0x948 <GPIO_setupPortDirection+0x6>
     948:	00 d0       	rcall	.+0      	; 0x94a <GPIO_setupPortDirection+0x8>
     94a:	0f 92       	push	r0
     94c:	cd b7       	in	r28, 0x3d	; 61
     94e:	de b7       	in	r29, 0x3e	; 62
     950:	89 83       	std	Y+1, r24	; 0x01
     952:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     954:	89 81       	ldd	r24, Y+1	; 0x01
     956:	84 30       	cpi	r24, 0x04	; 4
     958:	10 f0       	brcs	.+4      	; 0x95e <GPIO_setupPortDirection+0x1c>
	{

		return GPIO_ERROR;
     95a:	1d 82       	std	Y+5, r1	; 0x05
     95c:	34 c0       	rjmp	.+104    	; 0x9c6 <GPIO_setupPortDirection+0x84>
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     95e:	89 81       	ldd	r24, Y+1	; 0x01
     960:	28 2f       	mov	r18, r24
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	3c 83       	std	Y+4, r19	; 0x04
     966:	2b 83       	std	Y+3, r18	; 0x03
     968:	8b 81       	ldd	r24, Y+3	; 0x03
     96a:	9c 81       	ldd	r25, Y+4	; 0x04
     96c:	81 30       	cpi	r24, 0x01	; 1
     96e:	91 05       	cpc	r25, r1
     970:	d1 f0       	breq	.+52     	; 0x9a6 <GPIO_setupPortDirection+0x64>
     972:	2b 81       	ldd	r18, Y+3	; 0x03
     974:	3c 81       	ldd	r19, Y+4	; 0x04
     976:	22 30       	cpi	r18, 0x02	; 2
     978:	31 05       	cpc	r19, r1
     97a:	2c f4       	brge	.+10     	; 0x986 <GPIO_setupPortDirection+0x44>
     97c:	8b 81       	ldd	r24, Y+3	; 0x03
     97e:	9c 81       	ldd	r25, Y+4	; 0x04
     980:	00 97       	sbiw	r24, 0x00	; 0
     982:	61 f0       	breq	.+24     	; 0x99c <GPIO_setupPortDirection+0x5a>
     984:	1e c0       	rjmp	.+60     	; 0x9c2 <GPIO_setupPortDirection+0x80>
     986:	2b 81       	ldd	r18, Y+3	; 0x03
     988:	3c 81       	ldd	r19, Y+4	; 0x04
     98a:	22 30       	cpi	r18, 0x02	; 2
     98c:	31 05       	cpc	r19, r1
     98e:	81 f0       	breq	.+32     	; 0x9b0 <GPIO_setupPortDirection+0x6e>
     990:	8b 81       	ldd	r24, Y+3	; 0x03
     992:	9c 81       	ldd	r25, Y+4	; 0x04
     994:	83 30       	cpi	r24, 0x03	; 3
     996:	91 05       	cpc	r25, r1
     998:	81 f0       	breq	.+32     	; 0x9ba <GPIO_setupPortDirection+0x78>
     99a:	13 c0       	rjmp	.+38     	; 0x9c2 <GPIO_setupPortDirection+0x80>
		{
		case PORTA_ID:
			DDRA = direction;
     99c:	ea e3       	ldi	r30, 0x3A	; 58
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	8a 81       	ldd	r24, Y+2	; 0x02
     9a2:	80 83       	st	Z, r24
     9a4:	0e c0       	rjmp	.+28     	; 0x9c2 <GPIO_setupPortDirection+0x80>
			break;
		case PORTB_ID:
			DDRB = direction;
     9a6:	e7 e3       	ldi	r30, 0x37	; 55
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	8a 81       	ldd	r24, Y+2	; 0x02
     9ac:	80 83       	st	Z, r24
     9ae:	09 c0       	rjmp	.+18     	; 0x9c2 <GPIO_setupPortDirection+0x80>
			break;
		case PORTC_ID:
			DDRC = direction;
     9b0:	e4 e3       	ldi	r30, 0x34	; 52
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	8a 81       	ldd	r24, Y+2	; 0x02
     9b6:	80 83       	st	Z, r24
     9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <GPIO_setupPortDirection+0x80>
			break;
		case PORTD_ID:
			DDRD = direction;
     9ba:	e1 e3       	ldi	r30, 0x31	; 49
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	8a 81       	ldd	r24, Y+2	; 0x02
     9c0:	80 83       	st	Z, r24
			break;
		}
		return GPIO_SUCCESS;
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	9d 83       	std	Y+5, r25	; 0x05
     9c6:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	cf 91       	pop	r28
     9d4:	df 91       	pop	r29
     9d6:	08 95       	ret

000009d8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_FunctionState GPIO_writePort(uint8 port_num, uint8 value)
{
     9d8:	df 93       	push	r29
     9da:	cf 93       	push	r28
     9dc:	00 d0       	rcall	.+0      	; 0x9de <GPIO_writePort+0x6>
     9de:	00 d0       	rcall	.+0      	; 0x9e0 <GPIO_writePort+0x8>
     9e0:	0f 92       	push	r0
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
     9e6:	89 83       	std	Y+1, r24	; 0x01
     9e8:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
     9ea:	89 81       	ldd	r24, Y+1	; 0x01
     9ec:	84 30       	cpi	r24, 0x04	; 4
     9ee:	10 f0       	brcs	.+4      	; 0x9f4 <GPIO_writePort+0x1c>
	{
		return GPIO_ERROR;
     9f0:	1d 82       	std	Y+5, r1	; 0x05
     9f2:	34 c0       	rjmp	.+104    	; 0xa5c <GPIO_writePort+0x84>
	}
	else
	{
		switch(port_num)
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	28 2f       	mov	r18, r24
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	3c 83       	std	Y+4, r19	; 0x04
     9fc:	2b 83       	std	Y+3, r18	; 0x03
     9fe:	8b 81       	ldd	r24, Y+3	; 0x03
     a00:	9c 81       	ldd	r25, Y+4	; 0x04
     a02:	81 30       	cpi	r24, 0x01	; 1
     a04:	91 05       	cpc	r25, r1
     a06:	d1 f0       	breq	.+52     	; 0xa3c <GPIO_writePort+0x64>
     a08:	2b 81       	ldd	r18, Y+3	; 0x03
     a0a:	3c 81       	ldd	r19, Y+4	; 0x04
     a0c:	22 30       	cpi	r18, 0x02	; 2
     a0e:	31 05       	cpc	r19, r1
     a10:	2c f4       	brge	.+10     	; 0xa1c <GPIO_writePort+0x44>
     a12:	8b 81       	ldd	r24, Y+3	; 0x03
     a14:	9c 81       	ldd	r25, Y+4	; 0x04
     a16:	00 97       	sbiw	r24, 0x00	; 0
     a18:	61 f0       	breq	.+24     	; 0xa32 <GPIO_writePort+0x5a>
     a1a:	1e c0       	rjmp	.+60     	; 0xa58 <GPIO_writePort+0x80>
     a1c:	2b 81       	ldd	r18, Y+3	; 0x03
     a1e:	3c 81       	ldd	r19, Y+4	; 0x04
     a20:	22 30       	cpi	r18, 0x02	; 2
     a22:	31 05       	cpc	r19, r1
     a24:	81 f0       	breq	.+32     	; 0xa46 <GPIO_writePort+0x6e>
     a26:	8b 81       	ldd	r24, Y+3	; 0x03
     a28:	9c 81       	ldd	r25, Y+4	; 0x04
     a2a:	83 30       	cpi	r24, 0x03	; 3
     a2c:	91 05       	cpc	r25, r1
     a2e:	81 f0       	breq	.+32     	; 0xa50 <GPIO_writePort+0x78>
     a30:	13 c0       	rjmp	.+38     	; 0xa58 <GPIO_writePort+0x80>
		{
		case PORTA_ID:
			PORTA=value;
     a32:	eb e3       	ldi	r30, 0x3B	; 59
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	8a 81       	ldd	r24, Y+2	; 0x02
     a38:	80 83       	st	Z, r24
     a3a:	0e c0       	rjmp	.+28     	; 0xa58 <GPIO_writePort+0x80>
			break;
		case PORTB_ID:
			PORTB=value;
     a3c:	e8 e3       	ldi	r30, 0x38	; 56
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	8a 81       	ldd	r24, Y+2	; 0x02
     a42:	80 83       	st	Z, r24
     a44:	09 c0       	rjmp	.+18     	; 0xa58 <GPIO_writePort+0x80>
			break;
		case PORTC_ID:
			PORTC=value;
     a46:	e5 e3       	ldi	r30, 0x35	; 53
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	8a 81       	ldd	r24, Y+2	; 0x02
     a4c:	80 83       	st	Z, r24
     a4e:	04 c0       	rjmp	.+8      	; 0xa58 <GPIO_writePort+0x80>
			break;
		case PORTD_ID:
			PORTD=value;
     a50:	e2 e3       	ldi	r30, 0x32	; 50
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	8a 81       	ldd	r24, Y+2	; 0x02
     a56:	80 83       	st	Z, r24
			break;
		}
		return GPIO_SUCCESS;
     a58:	91 e0       	ldi	r25, 0x01	; 1
     a5a:	9d 83       	std	Y+5, r25	; 0x05
     a5c:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	cf 91       	pop	r28
     a6a:	df 91       	pop	r29
     a6c:	08 95       	ret

00000a6e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
     a6e:	df 93       	push	r29
     a70:	cf 93       	push	r28
     a72:	00 d0       	rcall	.+0      	; 0xa74 <GPIO_readPort+0x6>
     a74:	00 d0       	rcall	.+0      	; 0xa76 <GPIO_readPort+0x8>
     a76:	cd b7       	in	r28, 0x3d	; 61
     a78:	de b7       	in	r29, 0x3e	; 62
     a7a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_value=0;
     a7c:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
     a7e:	8a 81       	ldd	r24, Y+2	; 0x02
     a80:	84 30       	cpi	r24, 0x04	; 4
     a82:	90 f5       	brcc	.+100    	; 0xae8 <GPIO_readPort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
     a84:	8a 81       	ldd	r24, Y+2	; 0x02
     a86:	28 2f       	mov	r18, r24
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	3c 83       	std	Y+4, r19	; 0x04
     a8c:	2b 83       	std	Y+3, r18	; 0x03
     a8e:	8b 81       	ldd	r24, Y+3	; 0x03
     a90:	9c 81       	ldd	r25, Y+4	; 0x04
     a92:	81 30       	cpi	r24, 0x01	; 1
     a94:	91 05       	cpc	r25, r1
     a96:	d1 f0       	breq	.+52     	; 0xacc <GPIO_readPort+0x5e>
     a98:	2b 81       	ldd	r18, Y+3	; 0x03
     a9a:	3c 81       	ldd	r19, Y+4	; 0x04
     a9c:	22 30       	cpi	r18, 0x02	; 2
     a9e:	31 05       	cpc	r19, r1
     aa0:	2c f4       	brge	.+10     	; 0xaac <GPIO_readPort+0x3e>
     aa2:	8b 81       	ldd	r24, Y+3	; 0x03
     aa4:	9c 81       	ldd	r25, Y+4	; 0x04
     aa6:	00 97       	sbiw	r24, 0x00	; 0
     aa8:	61 f0       	breq	.+24     	; 0xac2 <GPIO_readPort+0x54>
     aaa:	1e c0       	rjmp	.+60     	; 0xae8 <GPIO_readPort+0x7a>
     aac:	2b 81       	ldd	r18, Y+3	; 0x03
     aae:	3c 81       	ldd	r19, Y+4	; 0x04
     ab0:	22 30       	cpi	r18, 0x02	; 2
     ab2:	31 05       	cpc	r19, r1
     ab4:	81 f0       	breq	.+32     	; 0xad6 <GPIO_readPort+0x68>
     ab6:	8b 81       	ldd	r24, Y+3	; 0x03
     ab8:	9c 81       	ldd	r25, Y+4	; 0x04
     aba:	83 30       	cpi	r24, 0x03	; 3
     abc:	91 05       	cpc	r25, r1
     abe:	81 f0       	breq	.+32     	; 0xae0 <GPIO_readPort+0x72>
     ac0:	13 c0       	rjmp	.+38     	; 0xae8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			a_value=PINA;
     ac2:	e9 e3       	ldi	r30, 0x39	; 57
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	80 81       	ld	r24, Z
     ac8:	89 83       	std	Y+1, r24	; 0x01
     aca:	0e c0       	rjmp	.+28     	; 0xae8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			a_value=PINB;
     acc:	e6 e3       	ldi	r30, 0x36	; 54
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	80 81       	ld	r24, Z
     ad2:	89 83       	std	Y+1, r24	; 0x01
     ad4:	09 c0       	rjmp	.+18     	; 0xae8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			a_value=PINC;
     ad6:	e3 e3       	ldi	r30, 0x33	; 51
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	80 81       	ld	r24, Z
     adc:	89 83       	std	Y+1, r24	; 0x01
     ade:	04 c0       	rjmp	.+8      	; 0xae8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			a_value=PIND;
     ae0:	e0 e3       	ldi	r30, 0x30	; 48
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	80 81       	ld	r24, Z
     ae6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return a_value;
     ae8:	89 81       	ldd	r24, Y+1	; 0x01
}
     aea:	0f 90       	pop	r0
     aec:	0f 90       	pop	r0
     aee:	0f 90       	pop	r0
     af0:	0f 90       	pop	r0
     af2:	cf 91       	pop	r28
     af4:	df 91       	pop	r29
     af6:	08 95       	ret

00000af8 <__vector_1>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(INT0_vect)
{
     af8:	1f 92       	push	r1
     afa:	0f 92       	push	r0
     afc:	0f b6       	in	r0, 0x3f	; 63
     afe:	0f 92       	push	r0
     b00:	11 24       	eor	r1, r1
     b02:	2f 93       	push	r18
     b04:	3f 93       	push	r19
     b06:	4f 93       	push	r20
     b08:	5f 93       	push	r21
     b0a:	6f 93       	push	r22
     b0c:	7f 93       	push	r23
     b0e:	8f 93       	push	r24
     b10:	9f 93       	push	r25
     b12:	af 93       	push	r26
     b14:	bf 93       	push	r27
     b16:	ef 93       	push	r30
     b18:	ff 93       	push	r31
     b1a:	df 93       	push	r29
     b1c:	cf 93       	push	r28
     b1e:	cd b7       	in	r28, 0x3d	; 61
     b20:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0!=NULL_PTR)
     b22:	80 91 74 00 	lds	r24, 0x0074
     b26:	90 91 75 00 	lds	r25, 0x0075
     b2a:	00 97       	sbiw	r24, 0x00	; 0
     b2c:	29 f0       	breq	.+10     	; 0xb38 <__vector_1+0x40>
	{
		(*g_callBackPtr0)();
     b2e:	e0 91 74 00 	lds	r30, 0x0074
     b32:	f0 91 75 00 	lds	r31, 0x0075
     b36:	09 95       	icall
	}
}
     b38:	cf 91       	pop	r28
     b3a:	df 91       	pop	r29
     b3c:	ff 91       	pop	r31
     b3e:	ef 91       	pop	r30
     b40:	bf 91       	pop	r27
     b42:	af 91       	pop	r26
     b44:	9f 91       	pop	r25
     b46:	8f 91       	pop	r24
     b48:	7f 91       	pop	r23
     b4a:	6f 91       	pop	r22
     b4c:	5f 91       	pop	r21
     b4e:	4f 91       	pop	r20
     b50:	3f 91       	pop	r19
     b52:	2f 91       	pop	r18
     b54:	0f 90       	pop	r0
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	0f 90       	pop	r0
     b5a:	1f 90       	pop	r1
     b5c:	18 95       	reti

00000b5e <__vector_2>:

ISR(INT1_vect)
{
     b5e:	1f 92       	push	r1
     b60:	0f 92       	push	r0
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	0f 92       	push	r0
     b66:	11 24       	eor	r1, r1
     b68:	2f 93       	push	r18
     b6a:	3f 93       	push	r19
     b6c:	4f 93       	push	r20
     b6e:	5f 93       	push	r21
     b70:	6f 93       	push	r22
     b72:	7f 93       	push	r23
     b74:	8f 93       	push	r24
     b76:	9f 93       	push	r25
     b78:	af 93       	push	r26
     b7a:	bf 93       	push	r27
     b7c:	ef 93       	push	r30
     b7e:	ff 93       	push	r31
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1!=NULL_PTR)
     b88:	80 91 76 00 	lds	r24, 0x0076
     b8c:	90 91 77 00 	lds	r25, 0x0077
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	29 f0       	breq	.+10     	; 0xb9e <__vector_2+0x40>
	{
		(*g_callBackPtr1)();
     b94:	e0 91 76 00 	lds	r30, 0x0076
     b98:	f0 91 77 00 	lds	r31, 0x0077
     b9c:	09 95       	icall
	}
}
     b9e:	cf 91       	pop	r28
     ba0:	df 91       	pop	r29
     ba2:	ff 91       	pop	r31
     ba4:	ef 91       	pop	r30
     ba6:	bf 91       	pop	r27
     ba8:	af 91       	pop	r26
     baa:	9f 91       	pop	r25
     bac:	8f 91       	pop	r24
     bae:	7f 91       	pop	r23
     bb0:	6f 91       	pop	r22
     bb2:	5f 91       	pop	r21
     bb4:	4f 91       	pop	r20
     bb6:	3f 91       	pop	r19
     bb8:	2f 91       	pop	r18
     bba:	0f 90       	pop	r0
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	0f 90       	pop	r0
     bc0:	1f 90       	pop	r1
     bc2:	18 95       	reti

00000bc4 <__vector_3>:

ISR(INT2_vect)
{
     bc4:	1f 92       	push	r1
     bc6:	0f 92       	push	r0
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	0f 92       	push	r0
     bcc:	11 24       	eor	r1, r1
     bce:	2f 93       	push	r18
     bd0:	3f 93       	push	r19
     bd2:	4f 93       	push	r20
     bd4:	5f 93       	push	r21
     bd6:	6f 93       	push	r22
     bd8:	7f 93       	push	r23
     bda:	8f 93       	push	r24
     bdc:	9f 93       	push	r25
     bde:	af 93       	push	r26
     be0:	bf 93       	push	r27
     be2:	ef 93       	push	r30
     be4:	ff 93       	push	r31
     be6:	df 93       	push	r29
     be8:	cf 93       	push	r28
     bea:	cd b7       	in	r28, 0x3d	; 61
     bec:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2!=NULL_PTR)
     bee:	80 91 78 00 	lds	r24, 0x0078
     bf2:	90 91 79 00 	lds	r25, 0x0079
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	29 f0       	breq	.+10     	; 0xc04 <__vector_3+0x40>
	{
		(*g_callBackPtr2)();
     bfa:	e0 91 78 00 	lds	r30, 0x0078
     bfe:	f0 91 79 00 	lds	r31, 0x0079
     c02:	09 95       	icall
	}
}
     c04:	cf 91       	pop	r28
     c06:	df 91       	pop	r29
     c08:	ff 91       	pop	r31
     c0a:	ef 91       	pop	r30
     c0c:	bf 91       	pop	r27
     c0e:	af 91       	pop	r26
     c10:	9f 91       	pop	r25
     c12:	8f 91       	pop	r24
     c14:	7f 91       	pop	r23
     c16:	6f 91       	pop	r22
     c18:	5f 91       	pop	r21
     c1a:	4f 91       	pop	r20
     c1c:	3f 91       	pop	r19
     c1e:	2f 91       	pop	r18
     c20:	0f 90       	pop	r0
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	0f 90       	pop	r0
     c26:	1f 90       	pop	r1
     c28:	18 95       	reti

00000c2a <EXT_Interrupts_interruptSetup>:
 *******************************************************************************/
/*
 * Description : This function enables the desired external interrupt with the desired interrupt trigger, besides setting the callback function.
 */
EXT_Interrupts_FunctionState EXT_Interrupts_interruptSetup(EXT_Interrupts_ConfigType* ConfigStruct)
{
     c2a:	df 93       	push	r29
     c2c:	cf 93       	push	r28
     c2e:	00 d0       	rcall	.+0      	; 0xc30 <EXT_Interrupts_interruptSetup+0x6>
     c30:	00 d0       	rcall	.+0      	; 0xc32 <EXT_Interrupts_interruptSetup+0x8>
     c32:	0f 92       	push	r0
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	9a 83       	std	Y+2, r25	; 0x02
     c3a:	89 83       	std	Y+1, r24	; 0x01

	if(ConfigStruct->INT>2 || ConfigStruct->INT<0 || ConfigStruct->Edge>3 || ConfigStruct->Edge<0 || ConfigStruct->callBackPtr==NULL_PTR)
     c3c:	e9 81       	ldd	r30, Y+1	; 0x01
     c3e:	fa 81       	ldd	r31, Y+2	; 0x02
     c40:	80 81       	ld	r24, Z
     c42:	83 30       	cpi	r24, 0x03	; 3
     c44:	58 f4       	brcc	.+22     	; 0xc5c <EXT_Interrupts_interruptSetup+0x32>
     c46:	e9 81       	ldd	r30, Y+1	; 0x01
     c48:	fa 81       	ldd	r31, Y+2	; 0x02
     c4a:	81 81       	ldd	r24, Z+1	; 0x01
     c4c:	84 30       	cpi	r24, 0x04	; 4
     c4e:	30 f4       	brcc	.+12     	; 0xc5c <EXT_Interrupts_interruptSetup+0x32>
     c50:	e9 81       	ldd	r30, Y+1	; 0x01
     c52:	fa 81       	ldd	r31, Y+2	; 0x02
     c54:	82 81       	ldd	r24, Z+2	; 0x02
     c56:	93 81       	ldd	r25, Z+3	; 0x03
     c58:	00 97       	sbiw	r24, 0x00	; 0
     c5a:	11 f4       	brne	.+4      	; 0xc60 <EXT_Interrupts_interruptSetup+0x36>
	{
		return EXT_INTERRUPT_ERROR;
     c5c:	1d 82       	std	Y+5, r1	; 0x05
     c5e:	a5 c0       	rjmp	.+330    	; 0xdaa <EXT_Interrupts_interruptSetup+0x180>
	}
	else
	{
		switch (ConfigStruct->INT)
     c60:	e9 81       	ldd	r30, Y+1	; 0x01
     c62:	fa 81       	ldd	r31, Y+2	; 0x02
     c64:	80 81       	ld	r24, Z
     c66:	28 2f       	mov	r18, r24
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	3c 83       	std	Y+4, r19	; 0x04
     c6c:	2b 83       	std	Y+3, r18	; 0x03
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	9c 81       	ldd	r25, Y+4	; 0x04
     c72:	81 30       	cpi	r24, 0x01	; 1
     c74:	91 05       	cpc	r25, r1
     c76:	61 f1       	breq	.+88     	; 0xcd0 <EXT_Interrupts_interruptSetup+0xa6>
     c78:	2b 81       	ldd	r18, Y+3	; 0x03
     c7a:	3c 81       	ldd	r19, Y+4	; 0x04
     c7c:	22 30       	cpi	r18, 0x02	; 2
     c7e:	31 05       	cpc	r19, r1
     c80:	09 f4       	brne	.+2      	; 0xc84 <EXT_Interrupts_interruptSetup+0x5a>
     c82:	4d c0       	rjmp	.+154    	; 0xd1e <EXT_Interrupts_interruptSetup+0xf4>
     c84:	8b 81       	ldd	r24, Y+3	; 0x03
     c86:	9c 81       	ldd	r25, Y+4	; 0x04
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	09 f0       	breq	.+2      	; 0xc8e <EXT_Interrupts_interruptSetup+0x64>
     c8c:	8c c0       	rjmp	.+280    	; 0xda6 <EXT_Interrupts_interruptSetup+0x17c>
		{
		case EXT_INT0:
			MCUCR=(MCUCR&0xFC)|(ConfigStruct->Edge);
     c8e:	a5 e5       	ldi	r26, 0x55	; 85
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e5 e5       	ldi	r30, 0x55	; 85
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	98 2f       	mov	r25, r24
     c9a:	9c 7f       	andi	r25, 0xFC	; 252
     c9c:	e9 81       	ldd	r30, Y+1	; 0x01
     c9e:	fa 81       	ldd	r31, Y+2	; 0x02
     ca0:	81 81       	ldd	r24, Z+1	; 0x01
     ca2:	89 2b       	or	r24, r25
     ca4:	8c 93       	st	X, r24
			g_callBackPtr0=ConfigStruct->callBackPtr;
     ca6:	e9 81       	ldd	r30, Y+1	; 0x01
     ca8:	fa 81       	ldd	r31, Y+2	; 0x02
     caa:	82 81       	ldd	r24, Z+2	; 0x02
     cac:	93 81       	ldd	r25, Z+3	; 0x03
     cae:	90 93 75 00 	sts	0x0075, r25
     cb2:	80 93 74 00 	sts	0x0074, r24
			GICR|=(1<<INT0);
     cb6:	ab e5       	ldi	r26, 0x5B	; 91
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	eb e5       	ldi	r30, 0x5B	; 91
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	80 64       	ori	r24, 0x40	; 64
     cc2:	8c 93       	st	X, r24
			GPIO_setupPinDirection(PORTD_ID, PIN2_ID, PIN_INPUT);
     cc4:	83 e0       	ldi	r24, 0x03	; 3
     cc6:	62 e0       	ldi	r22, 0x02	; 2
     cc8:	40 e0       	ldi	r20, 0x00	; 0
     cca:	0e 94 50 02 	call	0x4a0	; 0x4a0 <GPIO_setupPinDirection>
     cce:	6b c0       	rjmp	.+214    	; 0xda6 <EXT_Interrupts_interruptSetup+0x17c>
			break;
		case EXT_INT1:
			MCUCR=(MCUCR&0xF3)|(ConfigStruct->Edge<<ISC10);
     cd0:	a5 e5       	ldi	r26, 0x55	; 85
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e5 e5       	ldi	r30, 0x55	; 85
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	28 2f       	mov	r18, r24
     cdc:	23 7f       	andi	r18, 0xF3	; 243
     cde:	e9 81       	ldd	r30, Y+1	; 0x01
     ce0:	fa 81       	ldd	r31, Y+2	; 0x02
     ce2:	81 81       	ldd	r24, Z+1	; 0x01
     ce4:	88 2f       	mov	r24, r24
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	82 2b       	or	r24, r18
     cf2:	8c 93       	st	X, r24
			g_callBackPtr1=ConfigStruct->callBackPtr;
     cf4:	e9 81       	ldd	r30, Y+1	; 0x01
     cf6:	fa 81       	ldd	r31, Y+2	; 0x02
     cf8:	82 81       	ldd	r24, Z+2	; 0x02
     cfa:	93 81       	ldd	r25, Z+3	; 0x03
     cfc:	90 93 77 00 	sts	0x0077, r25
     d00:	80 93 76 00 	sts	0x0076, r24
			GICR|=(1<<INT1);
     d04:	ab e5       	ldi	r26, 0x5B	; 91
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	eb e5       	ldi	r30, 0x5B	; 91
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	80 68       	ori	r24, 0x80	; 128
     d10:	8c 93       	st	X, r24
			GPIO_setupPinDirection(PORTD_ID, PIN3_ID, PIN_INPUT);
     d12:	83 e0       	ldi	r24, 0x03	; 3
     d14:	63 e0       	ldi	r22, 0x03	; 3
     d16:	40 e0       	ldi	r20, 0x00	; 0
     d18:	0e 94 50 02 	call	0x4a0	; 0x4a0 <GPIO_setupPinDirection>
     d1c:	44 c0       	rjmp	.+136    	; 0xda6 <EXT_Interrupts_interruptSetup+0x17c>
			break;
		case EXT_INT2:
			if(ConfigStruct->Edge == 2)
     d1e:	e9 81       	ldd	r30, Y+1	; 0x01
     d20:	fa 81       	ldd	r31, Y+2	; 0x02
     d22:	81 81       	ldd	r24, Z+1	; 0x01
     d24:	82 30       	cpi	r24, 0x02	; 2
     d26:	e1 f4       	brne	.+56     	; 0xd60 <EXT_Interrupts_interruptSetup+0x136>
			{
				CLEAR_BIT(MCUCSR,ISC2);
     d28:	a4 e5       	ldi	r26, 0x54	; 84
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e4 e5       	ldi	r30, 0x54	; 84
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	8f 7b       	andi	r24, 0xBF	; 191
     d34:	8c 93       	st	X, r24
				g_callBackPtr2=ConfigStruct->callBackPtr;
     d36:	e9 81       	ldd	r30, Y+1	; 0x01
     d38:	fa 81       	ldd	r31, Y+2	; 0x02
     d3a:	82 81       	ldd	r24, Z+2	; 0x02
     d3c:	93 81       	ldd	r25, Z+3	; 0x03
     d3e:	90 93 79 00 	sts	0x0079, r25
     d42:	80 93 78 00 	sts	0x0078, r24
				GICR|=(1<<INT2);
     d46:	ab e5       	ldi	r26, 0x5B	; 91
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	eb e5       	ldi	r30, 0x5B	; 91
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	80 62       	ori	r24, 0x20	; 32
     d52:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTB_ID, PIN2_ID, PIN_INPUT);
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	62 e0       	ldi	r22, 0x02	; 2
     d58:	40 e0       	ldi	r20, 0x00	; 0
     d5a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <GPIO_setupPinDirection>
     d5e:	23 c0       	rjmp	.+70     	; 0xda6 <EXT_Interrupts_interruptSetup+0x17c>
			}
			else if(ConfigStruct->Edge==3)
     d60:	e9 81       	ldd	r30, Y+1	; 0x01
     d62:	fa 81       	ldd	r31, Y+2	; 0x02
     d64:	81 81       	ldd	r24, Z+1	; 0x01
     d66:	83 30       	cpi	r24, 0x03	; 3
     d68:	e1 f4       	brne	.+56     	; 0xda2 <EXT_Interrupts_interruptSetup+0x178>
			{
				SET_BIT(MCUCSR,ISC2);
     d6a:	a4 e5       	ldi	r26, 0x54	; 84
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e4 e5       	ldi	r30, 0x54	; 84
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	80 64       	ori	r24, 0x40	; 64
     d76:	8c 93       	st	X, r24
				g_callBackPtr2=ConfigStruct->callBackPtr;
     d78:	e9 81       	ldd	r30, Y+1	; 0x01
     d7a:	fa 81       	ldd	r31, Y+2	; 0x02
     d7c:	82 81       	ldd	r24, Z+2	; 0x02
     d7e:	93 81       	ldd	r25, Z+3	; 0x03
     d80:	90 93 79 00 	sts	0x0079, r25
     d84:	80 93 78 00 	sts	0x0078, r24
				GICR|=(1<<INT2);
     d88:	ab e5       	ldi	r26, 0x5B	; 91
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	eb e5       	ldi	r30, 0x5B	; 91
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	80 62       	ori	r24, 0x20	; 32
     d94:	8c 93       	st	X, r24
				GPIO_setupPinDirection(PORTB_ID, PIN2_ID, PIN_INPUT);
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	62 e0       	ldi	r22, 0x02	; 2
     d9a:	40 e0       	ldi	r20, 0x00	; 0
     d9c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <GPIO_setupPinDirection>
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <EXT_Interrupts_interruptSetup+0x17c>
			}
			else
			{
				return EXT_INTERRUPT_ERROR;
     da2:	1d 82       	std	Y+5, r1	; 0x05
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <EXT_Interrupts_interruptSetup+0x180>
			}
			break;
		}
		return EXT_INTERRUPT_SUCCESS;
     da6:	91 e0       	ldi	r25, 0x01	; 1
     da8:	9d 83       	std	Y+5, r25	; 0x05
     daa:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	08 95       	ret

00000dbc <LED_setup>:
 *******************************************************************************/
/*
 * Description : This function is responsible for setting up a led to be connected to a specific port and pin in the mcu.
 */
LED_FunctionState LED_setup(uint8 port_num, uint8 pin_num)
{
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	00 d0       	rcall	.+0      	; 0xdc2 <LED_setup+0x6>
     dc2:	0f 92       	push	r0
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	89 83       	std	Y+1, r24	; 0x01
     dca:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>3 || pin_num>7 )
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	84 30       	cpi	r24, 0x04	; 4
     dd0:	18 f4       	brcc	.+6      	; 0xdd8 <LED_setup+0x1c>
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	88 30       	cpi	r24, 0x08	; 8
     dd6:	10 f0       	brcs	.+4      	; 0xddc <LED_setup+0x20>
	{
		return LED_ERROR;
     dd8:	1b 82       	std	Y+3, r1	; 0x03
     dda:	0f c0       	rjmp	.+30     	; 0xdfa <LED_setup+0x3e>
	}
	else
	{
		if(GPIO_setupPinDirection(port_num, pin_num, PIN_OUTPUT)== GPIO_SUCCESS)
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	6a 81       	ldd	r22, Y+2	; 0x02
     de0:	41 e0       	ldi	r20, 0x01	; 1
     de2:	0e 94 50 02 	call	0x4a0	; 0x4a0 <GPIO_setupPinDirection>
     de6:	81 30       	cpi	r24, 0x01	; 1
     de8:	39 f4       	brne	.+14     	; 0xdf8 <LED_setup+0x3c>
		{
			LED_off(port_num, pin_num);
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	6a 81       	ldd	r22, Y+2	; 0x02
     dee:	0e 94 15 07 	call	0xe2a	; 0xe2a <LED_off>
			return LED_SUCCESS;
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	8b 83       	std	Y+3, r24	; 0x03
     df6:	01 c0       	rjmp	.+2      	; 0xdfa <LED_setup+0x3e>
		}
		else
		{
			return LED_ERROR;
     df8:	1b 82       	std	Y+3, r1	; 0x03
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
		}

	}
}
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	08 95       	ret

00000e08 <LED_on>:

/*
 * Description : This function is responsible for turning on a led via gpio driver.
 */
void LED_on(uint8 port_num, uint8 pin_num)
{
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <LED_on+0x6>
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	89 83       	std	Y+1, r24	; 0x01
     e14:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_writePin(port_num, pin_num, LED_ON);
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	6a 81       	ldd	r22, Y+2	; 0x02
     e1a:	41 e0       	ldi	r20, 0x01	; 1
     e1c:	0e 94 3f 03 	call	0x67e	; 0x67e <GPIO_writePin>
}
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <LED_off>:

/*
 * Description : This function is responsible for turning off a led via gpio driver.
 */
void LED_off(uint8 port_num, uint8 pin_num)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <LED_off+0x6>
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	89 83       	std	Y+1, r24	; 0x01
     e36:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_writePin(port_num, pin_num, LED_OFF);
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	6a 81       	ldd	r22, Y+2	; 0x02
     e3c:	40 e0       	ldi	r20, 0x00	; 0
     e3e:	0e 94 3f 03 	call	0x67e	; 0x67e <GPIO_writePin>
}
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	cf 91       	pop	r28
     e48:	df 91       	pop	r29
     e4a:	08 95       	ret

00000e4c <LED_toggle>:

/*
 * Description : This function is responsible for toggling a led via gpio driver.
 */
void LED_toggle(uint8 port_num, uint8 pin_num)
{
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	00 d0       	rcall	.+0      	; 0xe52 <LED_toggle+0x6>
     e52:	0f 92       	push	r0
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	8a 83       	std	Y+2, r24	; 0x02
     e5a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value=GPIO_readPin(port_num, pin_num);
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	6b 81       	ldd	r22, Y+3	; 0x03
     e60:	0e 94 06 04 	call	0x80c	; 0x80c <GPIO_readPin>
     e64:	89 83       	std	Y+1, r24	; 0x01
	if(value== LED_ON)
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	81 30       	cpi	r24, 0x01	; 1
     e6a:	31 f4       	brne	.+12     	; 0xe78 <LED_toggle+0x2c>
	{
		GPIO_writePin(port_num, pin_num, LED_OFF);
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	6b 81       	ldd	r22, Y+3	; 0x03
     e70:	40 e0       	ldi	r20, 0x00	; 0
     e72:	0e 94 3f 03 	call	0x67e	; 0x67e <GPIO_writePin>
     e76:	05 c0       	rjmp	.+10     	; 0xe82 <LED_toggle+0x36>
	}
	else
	{
		GPIO_writePin(port_num, pin_num, LED_ON);
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	6b 81       	ldd	r22, Y+3	; 0x03
     e7c:	41 e0       	ldi	r20, 0x01	; 1
     e7e:	0e 94 3f 03 	call	0x67e	; 0x67e <GPIO_writePin>
	}
}
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <app_start>:
 *******************************************************************************/
/*
 * Description : This functions starts the application.
 */
void app_start()
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <app_start+0x6>
     e94:	00 d0       	rcall	.+0      	; 0xe96 <app_start+0x8>
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
	/*External interrupt 0 configuration*/
	EXT_Interrupts_ConfigType EXT_Interrupt_Struct={
			EXT_INT0,EXT_FALLING_EDGE,button_callBack
	};
     e9a:	19 82       	std	Y+1, r1	; 0x01
     e9c:	82 e0       	ldi	r24, 0x02	; 2
     e9e:	8a 83       	std	Y+2, r24	; 0x02
     ea0:	88 e8       	ldi	r24, 0x88	; 136
     ea2:	97 e0       	ldi	r25, 0x07	; 7
     ea4:	9c 83       	std	Y+4, r25	; 0x04
     ea6:	8b 83       	std	Y+3, r24	; 0x03

	/*Enable the I-bit*/
	SREG|=(1<<7);
     ea8:	af e5       	ldi	r26, 0x5F	; 95
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	ef e5       	ldi	r30, 0x5F	; 95
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	80 68       	ori	r24, 0x80	; 128
     eb4:	8c 93       	st	X, r24

	/*Setup Timer1 callback, .i.e, the pedestrian mode logic*/
	Timer1_setCallBack(timer1_callBack);
     eb6:	8b e9       	ldi	r24, 0x9B	; 155
     eb8:	97 e0       	ldi	r25, 0x07	; 7
     eba:	0e 94 44 01 	call	0x288	; 0x288 <Timer1_setCallBack>
	/*Setup Timer0 callback, .i.e, the normal mode logic*/
	Timer0_setCallBack(timer0_callBack);
     ebe:	81 e2       	ldi	r24, 0x21	; 33
     ec0:	99 e0       	ldi	r25, 0x09	; 9
     ec2:	0e 94 3e 02 	call	0x47c	; 0x47c <Timer0_setCallBack>
	/*Configure the LEDs*/
	setup_LEDs();
     ec6:	0e 94 6e 07 	call	0xedc	; 0xedc <setup_LEDs>
	/*Configure INT0*/
	EXT_Interrupts_interruptSetup(&EXT_Interrupt_Struct);
     eca:	ce 01       	movw	r24, r28
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	0e 94 15 06 	call	0xc2a	; 0xc2a <EXT_Interrupts_interruptSetup>
	/*Start Timer0, thus start the system in normal mode*/
	Timer0_init(&Timer0_Struct);
     ed2:	80 e6       	ldi	r24, 0x60	; 96
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	0e 94 bc 01 	call	0x378	; 0x378 <Timer0_init>
     eda:	ff cf       	rjmp	.-2      	; 0xeda <app_start+0x4c>

00000edc <setup_LEDs>:

/*
 * Description : This functions configure the pins that are connected to the leds as output pins
 */
void setup_LEDs()
{
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	0f 92       	push	r0
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
	uint8 pin_index=0;
     ee6:	19 82       	std	Y+1, r1	; 0x01

	for(pin_index=0; pin_index<3; pin_index++)
     ee8:	19 82       	std	Y+1, r1	; 0x01
     eea:	0b c0       	rjmp	.+22     	; 0xf02 <setup_LEDs+0x26>
	{
		LED_setup(CAR_LEDS_PORT_ID, pin_index);
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	69 81       	ldd	r22, Y+1	; 0x01
     ef0:	0e 94 de 06 	call	0xdbc	; 0xdbc <LED_setup>
		LED_setup(PEDESTRIANS_PORT_ID, pin_index);
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	69 81       	ldd	r22, Y+1	; 0x01
     ef8:	0e 94 de 06 	call	0xdbc	; 0xdbc <LED_setup>
 */
void setup_LEDs()
{
	uint8 pin_index=0;

	for(pin_index=0; pin_index<3; pin_index++)
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	8f 5f       	subi	r24, 0xFF	; 255
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	83 30       	cpi	r24, 0x03	; 3
     f06:	90 f3       	brcs	.-28     	; 0xeec <setup_LEDs+0x10>
	{
		LED_setup(CAR_LEDS_PORT_ID, pin_index);
		LED_setup(PEDESTRIANS_PORT_ID, pin_index);
	}
}
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <button_callBack>:

/*
 * Description : This functions contains the logic of the instructions to be executed when the button triggers an interrupt.
 */
void button_callBack()
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
	if(g_button_interrupt_flag==TRUE)
     f18:	80 91 6d 00 	lds	r24, 0x006D
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	41 f4       	brne	.+16     	; 0xf30 <button_callBack+0x20>
	{
		g_button_interrupt_flag=FALSE;
     f20:	10 92 6d 00 	sts	0x006D, r1
		Timer0_deInit();
     f24:	0e 94 27 02 	call	0x44e	; 0x44e <Timer0_deInit>
		Timer1_init(&Timer1_Struct);
     f28:	86 e6       	ldi	r24, 0x66	; 102
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 b6 00 	call	0x16c	; 0x16c <Timer1_init>
	}
}
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <timer1_callBack>:

/*
 * Description : This functions contains the logic of the instructions to be executed when Timer1 triggers an interrupt.
 */
void timer1_callBack()
{
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <timer1_callBack+0x6>
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <timer1_callBack+0x8>
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <timer1_callBack+0xa>
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
	static uint8 seconds=0;
	static boolean yellow_on=TRUE;
	static Mode_Switching mode_state=ENTERING_PEDESTRIANS;
	static Mode_Switching mode_subState=ENTERING_PEDESTRIANS;
	if(g_car_red_on==TRUE)
     f44:	80 91 7a 00 	lds	r24, 0x007A
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	09 f0       	breq	.+2      	; 0xf4e <timer1_callBack+0x18>
     f4c:	8b c0       	rjmp	.+278    	; 0x1064 <timer1_callBack+0x12e>
	{
		switch(mode_state)
     f4e:	80 91 82 00 	lds	r24, 0x0082
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	3e 83       	std	Y+6, r19	; 0x06
     f58:	2d 83       	std	Y+5, r18	; 0x05
     f5a:	8d 81       	ldd	r24, Y+5	; 0x05
     f5c:	9e 81       	ldd	r25, Y+6	; 0x06
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	91 05       	cpc	r25, r1
     f62:	99 f1       	breq	.+102    	; 0xfca <timer1_callBack+0x94>
     f64:	2d 81       	ldd	r18, Y+5	; 0x05
     f66:	3e 81       	ldd	r19, Y+6	; 0x06
     f68:	22 30       	cpi	r18, 0x02	; 2
     f6a:	31 05       	cpc	r19, r1
     f6c:	09 f4       	brne	.+2      	; 0xf70 <timer1_callBack+0x3a>
     f6e:	59 c0       	rjmp	.+178    	; 0x1022 <timer1_callBack+0xec>
     f70:	8d 81       	ldd	r24, Y+5	; 0x05
     f72:	9e 81       	ldd	r25, Y+6	; 0x06
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	09 f0       	breq	.+2      	; 0xf7a <timer1_callBack+0x44>
     f78:	5b c1       	rjmp	.+694    	; 0x1230 <timer1_callBack+0x2fa>
		{
		case ENTERING_PEDESTRIANS:
			LED_off(PEDESTRIANS_PORT_ID,RED_LED);
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	62 e0       	ldi	r22, 0x02	; 2
     f7e:	0e 94 15 07 	call	0xe2a	; 0xe2a <LED_off>
			LED_on(CAR_LEDS_PORT_ID,RED_LED);
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	62 e0       	ldi	r22, 0x02	; 2
     f86:	0e 94 04 07 	call	0xe08	; 0xe08 <LED_on>
			LED_on(PEDESTRIANS_PORT_ID,GREEN_LED);
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	0e 94 04 07 	call	0xe08	; 0xe08 <LED_on>
			seconds++;
     f92:	80 91 83 00 	lds	r24, 0x0083
     f96:	8f 5f       	subi	r24, 0xFF	; 255
     f98:	80 93 83 00 	sts	0x0083, r24
			if(seconds==5)
     f9c:	80 91 83 00 	lds	r24, 0x0083
     fa0:	85 30       	cpi	r24, 0x05	; 5
     fa2:	09 f0       	breq	.+2      	; 0xfa6 <timer1_callBack+0x70>
     fa4:	45 c1       	rjmp	.+650    	; 0x1230 <timer1_callBack+0x2fa>
			{
				LED_off(CAR_LEDS_PORT_ID,RED_LED);
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	62 e0       	ldi	r22, 0x02	; 2
     faa:	0e 94 15 07 	call	0xe2a	; 0xe2a <LED_off>
				LED_on(CAR_LEDS_PORT_ID,YELLOW_LED);
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	61 e0       	ldi	r22, 0x01	; 1
     fb2:	0e 94 04 07 	call	0xe08	; 0xe08 <LED_on>
				LED_on(PEDESTRIANS_PORT_ID,YELLOW_LED);
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	61 e0       	ldi	r22, 0x01	; 1
     fba:	0e 94 04 07 	call	0xe08	; 0xe08 <LED_on>
				seconds=0;
     fbe:	10 92 83 00 	sts	0x0083, r1
				mode_state=RETURNING_TO_NORMAL;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	80 93 82 00 	sts	0x0082, r24
     fc8:	33 c1       	rjmp	.+614    	; 0x1230 <timer1_callBack+0x2fa>
			}
			break;
		case RETURNING_TO_NORMAL:
			seconds++;
     fca:	80 91 83 00 	lds	r24, 0x0083
     fce:	8f 5f       	subi	r24, 0xFF	; 255
     fd0:	80 93 83 00 	sts	0x0083, r24
			if(seconds==5)
     fd4:	80 91 83 00 	lds	r24, 0x0083
     fd8:	85 30       	cpi	r24, 0x05	; 5
     fda:	d1 f4       	brne	.+52     	; 0x1010 <timer1_callBack+0xda>
			{
				seconds=0;
     fdc:	10 92 83 00 	sts	0x0083, r1
				mode_state=INITIALIZING_FOR_NORMAL;
     fe0:	82 e0       	ldi	r24, 0x02	; 2
     fe2:	80 93 82 00 	sts	0x0082, r24
				LED_off(CAR_LEDS_PORT_ID,YELLOW_LED);
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	61 e0       	ldi	r22, 0x01	; 1
     fea:	0e 94 15 07 	call	0xe2a	; 0xe2a <LED_off>
				LED_off(PEDESTRIANS_PORT_ID,YELLOW_LED);
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	61 e0       	ldi	r22, 0x01	; 1
     ff2:	0e 94 15 07 	call	0xe2a	; 0xe2a <LED_off>
				LED_on(CAR_LEDS_PORT_ID,RED_LED);
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	62 e0       	ldi	r22, 0x02	; 2
     ffa:	0e 94 04 07 	call	0xe08	; 0xe08 <LED_on>
				LED_on(PEDESTRIANS_PORT_ID,RED_LED);
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	62 e0       	ldi	r22, 0x02	; 2
    1002:	0e 94 04 07 	call	0xe08	; 0xe08 <LED_on>
				LED_off(PEDESTRIANS_PORT_ID,GREEN_LED);
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	0e 94 15 07 	call	0xe2a	; 0xe2a <LED_off>
    100e:	10 c1       	rjmp	.+544    	; 0x1230 <timer1_callBack+0x2fa>
			}
			else
			{
				LED_toggle(CAR_LEDS_PORT_ID,YELLOW_LED);
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	61 e0       	ldi	r22, 0x01	; 1
    1014:	0e 94 26 07 	call	0xe4c	; 0xe4c <LED_toggle>
				LED_toggle(PEDESTRIANS_PORT_ID,YELLOW_LED);
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	61 e0       	ldi	r22, 0x01	; 1
    101c:	0e 94 26 07 	call	0xe4c	; 0xe4c <LED_toggle>
    1020:	07 c1       	rjmp	.+526    	; 0x1230 <timer1_callBack+0x2fa>
			}
			break;
		case INITIALIZING_FOR_NORMAL:
			seconds++;
    1022:	80 91 83 00 	lds	r24, 0x0083
    1026:	8f 5f       	subi	r24, 0xFF	; 255
    1028:	80 93 83 00 	sts	0x0083, r24
			if(seconds==5)
    102c:	80 91 83 00 	lds	r24, 0x0083
    1030:	85 30       	cpi	r24, 0x05	; 5
    1032:	09 f0       	breq	.+2      	; 0x1036 <timer1_callBack+0x100>
    1034:	fd c0       	rjmp	.+506    	; 0x1230 <timer1_callBack+0x2fa>
			{
				seconds=0;
    1036:	10 92 83 00 	sts	0x0083, r1
				yellow_on=TRUE;
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	80 93 6e 00 	sts	0x006E, r24
				mode_state=ENTERING_PEDESTRIANS;
    1040:	10 92 82 00 	sts	0x0082, r1
				LED_off(CAR_LEDS_PORT_ID,RED_LED);
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	62 e0       	ldi	r22, 0x02	; 2
    1048:	0e 94 15 07 	call	0xe2a	; 0xe2a <LED_off>
				reinitializeForNormalMode();
    104c:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <reinitializeForNormalMode>
				g_button_interrupt_flag=TRUE;
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	80 93 6d 00 	sts	0x006D, r24
				Timer1_deInit();
    1056:	0e 94 28 01 	call	0x250	; 0x250 <Timer1_deInit>
				Timer0_init(&Timer0_Struct);
    105a:	80 e6       	ldi	r24, 0x60	; 96
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	0e 94 bc 01 	call	0x378	; 0x378 <Timer0_init>
    1062:	e6 c0       	rjmp	.+460    	; 0x1230 <timer1_callBack+0x2fa>
			}
			break;
		}
	}
	else if(g_car_green_on==TRUE || g_car_yellow_on==TRUE)
    1064:	80 91 7c 00 	lds	r24, 0x007C
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	29 f0       	breq	.+10     	; 0x1076 <timer1_callBack+0x140>
    106c:	80 91 7b 00 	lds	r24, 0x007B
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	09 f0       	breq	.+2      	; 0x1076 <timer1_callBack+0x140>
    1074:	dd c0       	rjmp	.+442    	; 0x1230 <timer1_callBack+0x2fa>
	{
		switch (mode_state)
    1076:	80 91 82 00 	lds	r24, 0x0082
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	3c 83       	std	Y+4, r19	; 0x04
    1080:	2b 83       	std	Y+3, r18	; 0x03
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	9c 81       	ldd	r25, Y+4	; 0x04
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	91 05       	cpc	r25, r1
    108a:	09 f4       	brne	.+2      	; 0x108e <timer1_callBack+0x158>
    108c:	84 c0       	rjmp	.+264    	; 0x1196 <timer1_callBack+0x260>
    108e:	2b 81       	ldd	r18, Y+3	; 0x03
    1090:	3c 81       	ldd	r19, Y+4	; 0x04
    1092:	22 30       	cpi	r18, 0x02	; 2
    1094:	31 05       	cpc	r19, r1
    1096:	09 f4       	brne	.+2      	; 0x109a <timer1_callBack+0x164>
    1098:	aa c0       	rjmp	.+340    	; 0x11ee <timer1_callBack+0x2b8>
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <timer1_callBack+0x16e>
    10a2:	c6 c0       	rjmp	.+396    	; 0x1230 <timer1_callBack+0x2fa>
		{
		case ENTERING_PEDESTRIANS:
			switch (mode_subState)
    10a4:	80 91 81 00 	lds	r24, 0x0081
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	3a 83       	std	Y+2, r19	; 0x02
    10ae:	29 83       	std	Y+1, r18	; 0x01
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	9a 81       	ldd	r25, Y+2	; 0x02
    10b4:	00 97       	sbiw	r24, 0x00	; 0
    10b6:	39 f0       	breq	.+14     	; 0x10c6 <timer1_callBack+0x190>
    10b8:	29 81       	ldd	r18, Y+1	; 0x01
    10ba:	3a 81       	ldd	r19, Y+2	; 0x02
    10bc:	21 30       	cpi	r18, 0x01	; 1
    10be:	31 05       	cpc	r19, r1
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <timer1_callBack+0x18e>
    10c2:	4b c0       	rjmp	.+150    	; 0x115a <timer1_callBack+0x224>
    10c4:	b5 c0       	rjmp	.+362    	; 0x1230 <timer1_callBack+0x2fa>
			{
			case ENTERING_PEDESTRIANS:
				LED_on(PEDESTRIANS_PORT_ID, RED_LED);
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	62 e0       	ldi	r22, 0x02	; 2
    10ca:	0e 94 04 07 	call	0xe08	; 0xe08 <LED_on>
				LED_off(CAR_LEDS_PORT_ID,GREEN_LED);
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	60 e0       	ldi	r22, 0x00	; 0
    10d2:	0e 94 15 07 	call	0xe2a	; 0xe2a <LED_off>
				if(yellow_on==TRUE)
    10d6:	80 91 6e 00 	lds	r24, 0x006E
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	59 f4       	brne	.+22     	; 0x10f4 <timer1_callBack+0x1be>
				{
					yellow_on=FALSE;
    10de:	10 92 6e 00 	sts	0x006E, r1
					LED_on(PEDESTRIANS_PORT_ID,YELLOW_LED);
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	61 e0       	ldi	r22, 0x01	; 1
    10e6:	0e 94 04 07 	call	0xe08	; 0xe08 <LED_on>
					LED_on(CAR_LEDS_PORT_ID,YELLOW_LED);
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	61 e0       	ldi	r22, 0x01	; 1
    10ee:	0e 94 04 07 	call	0xe08	; 0xe08 <LED_on>
    10f2:	9e c0       	rjmp	.+316    	; 0x1230 <timer1_callBack+0x2fa>
				}
				else
				{
					seconds++;
    10f4:	80 91 83 00 	lds	r24, 0x0083
    10f8:	8f 5f       	subi	r24, 0xFF	; 255
    10fa:	80 93 83 00 	sts	0x0083, r24
					if(seconds==5)
    10fe:	80 91 83 00 	lds	r24, 0x0083
    1102:	85 30       	cpi	r24, 0x05	; 5
    1104:	09 f5       	brne	.+66     	; 0x1148 <timer1_callBack+0x212>
					{
						LED_off(PEDESTRIANS_PORT_ID,YELLOW_LED);
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	61 e0       	ldi	r22, 0x01	; 1
    110a:	0e 94 15 07 	call	0xe2a	; 0xe2a <LED_off>
						LED_off(CAR_LEDS_PORT_ID,YELLOW_LED);
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	61 e0       	ldi	r22, 0x01	; 1
    1112:	0e 94 15 07 	call	0xe2a	; 0xe2a <LED_off>
						LED_on(CAR_LEDS_PORT_ID,RED_LED);
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	62 e0       	ldi	r22, 0x02	; 2
    111a:	0e 94 04 07 	call	0xe08	; 0xe08 <LED_on>
						LED_off(CAR_LEDS_PORT_ID,GREEN_LED);
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	0e 94 15 07 	call	0xe2a	; 0xe2a <LED_off>
						LED_on(PEDESTRIANS_PORT_ID,GREEN_LED);
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	60 e0       	ldi	r22, 0x00	; 0
    112a:	0e 94 04 07 	call	0xe08	; 0xe08 <LED_on>
						LED_off(PEDESTRIANS_PORT_ID, RED_LED);
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	62 e0       	ldi	r22, 0x02	; 2
    1132:	0e 94 15 07 	call	0xe2a	; 0xe2a <LED_off>
						seconds=0;
    1136:	10 92 83 00 	sts	0x0083, r1
						yellow_on=TRUE;
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	80 93 6e 00 	sts	0x006E, r24
						mode_subState = RETURNING_TO_NORMAL;
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	80 93 81 00 	sts	0x0081, r24
    1146:	74 c0       	rjmp	.+232    	; 0x1230 <timer1_callBack+0x2fa>
					}
					else
					{
						LED_toggle(PEDESTRIANS_PORT_ID,YELLOW_LED);
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	61 e0       	ldi	r22, 0x01	; 1
    114c:	0e 94 26 07 	call	0xe4c	; 0xe4c <LED_toggle>
						LED_toggle(CAR_LEDS_PORT_ID,YELLOW_LED);
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	61 e0       	ldi	r22, 0x01	; 1
    1154:	0e 94 26 07 	call	0xe4c	; 0xe4c <LED_toggle>
    1158:	6b c0       	rjmp	.+214    	; 0x1230 <timer1_callBack+0x2fa>
					}
				}
				break;
			case RETURNING_TO_NORMAL:
				seconds++;
    115a:	80 91 83 00 	lds	r24, 0x0083
    115e:	8f 5f       	subi	r24, 0xFF	; 255
    1160:	80 93 83 00 	sts	0x0083, r24
				if(seconds==5)
    1164:	80 91 83 00 	lds	r24, 0x0083
    1168:	85 30       	cpi	r24, 0x05	; 5
    116a:	09 f0       	breq	.+2      	; 0x116e <timer1_callBack+0x238>
    116c:	61 c0       	rjmp	.+194    	; 0x1230 <timer1_callBack+0x2fa>
				{
					seconds=0;
    116e:	10 92 83 00 	sts	0x0083, r1
					LED_off(CAR_LEDS_PORT_ID,RED_LED);
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	62 e0       	ldi	r22, 0x02	; 2
    1176:	0e 94 15 07 	call	0xe2a	; 0xe2a <LED_off>
					LED_on(PEDESTRIANS_PORT_ID,YELLOW_LED);
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	61 e0       	ldi	r22, 0x01	; 1
    117e:	0e 94 04 07 	call	0xe08	; 0xe08 <LED_on>
					LED_on(CAR_LEDS_PORT_ID,YELLOW_LED);
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	61 e0       	ldi	r22, 0x01	; 1
    1186:	0e 94 04 07 	call	0xe08	; 0xe08 <LED_on>
					mode_subState = ENTERING_PEDESTRIANS;
    118a:	10 92 81 00 	sts	0x0081, r1
					mode_state=RETURNING_TO_NORMAL;
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	80 93 82 00 	sts	0x0082, r24
    1194:	4d c0       	rjmp	.+154    	; 0x1230 <timer1_callBack+0x2fa>
				/*Do Nothing*/
				break;
			}
			break;
			case RETURNING_TO_NORMAL:
				seconds++;
    1196:	80 91 83 00 	lds	r24, 0x0083
    119a:	8f 5f       	subi	r24, 0xFF	; 255
    119c:	80 93 83 00 	sts	0x0083, r24
				if(seconds==5)
    11a0:	80 91 83 00 	lds	r24, 0x0083
    11a4:	85 30       	cpi	r24, 0x05	; 5
    11a6:	d1 f4       	brne	.+52     	; 0x11dc <timer1_callBack+0x2a6>
				{
					seconds=0;
    11a8:	10 92 83 00 	sts	0x0083, r1
					mode_state=INITIALIZING_FOR_NORMAL;
    11ac:	82 e0       	ldi	r24, 0x02	; 2
    11ae:	80 93 82 00 	sts	0x0082, r24
					LED_off(CAR_LEDS_PORT_ID,YELLOW_LED);
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	61 e0       	ldi	r22, 0x01	; 1
    11b6:	0e 94 15 07 	call	0xe2a	; 0xe2a <LED_off>
					LED_off(PEDESTRIANS_PORT_ID,YELLOW_LED);
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	61 e0       	ldi	r22, 0x01	; 1
    11be:	0e 94 15 07 	call	0xe2a	; 0xe2a <LED_off>
					LED_on(CAR_LEDS_PORT_ID,RED_LED);
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	62 e0       	ldi	r22, 0x02	; 2
    11c6:	0e 94 04 07 	call	0xe08	; 0xe08 <LED_on>
					LED_on(PEDESTRIANS_PORT_ID,RED_LED);
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	62 e0       	ldi	r22, 0x02	; 2
    11ce:	0e 94 04 07 	call	0xe08	; 0xe08 <LED_on>
					LED_off(PEDESTRIANS_PORT_ID,GREEN_LED);
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	0e 94 15 07 	call	0xe2a	; 0xe2a <LED_off>
    11da:	2a c0       	rjmp	.+84     	; 0x1230 <timer1_callBack+0x2fa>
				}
				else
				{
					LED_toggle(CAR_LEDS_PORT_ID,YELLOW_LED);
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	61 e0       	ldi	r22, 0x01	; 1
    11e0:	0e 94 26 07 	call	0xe4c	; 0xe4c <LED_toggle>
					LED_toggle(PEDESTRIANS_PORT_ID,YELLOW_LED);
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	61 e0       	ldi	r22, 0x01	; 1
    11e8:	0e 94 26 07 	call	0xe4c	; 0xe4c <LED_toggle>
    11ec:	21 c0       	rjmp	.+66     	; 0x1230 <timer1_callBack+0x2fa>
				}
				break;
			case INITIALIZING_FOR_NORMAL:
				seconds++;
    11ee:	80 91 83 00 	lds	r24, 0x0083
    11f2:	8f 5f       	subi	r24, 0xFF	; 255
    11f4:	80 93 83 00 	sts	0x0083, r24
				if(seconds==5)
    11f8:	80 91 83 00 	lds	r24, 0x0083
    11fc:	85 30       	cpi	r24, 0x05	; 5
    11fe:	c1 f4       	brne	.+48     	; 0x1230 <timer1_callBack+0x2fa>
				{
					seconds=0;
    1200:	10 92 83 00 	sts	0x0083, r1
					yellow_on=TRUE;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	80 93 6e 00 	sts	0x006E, r24
					mode_state=ENTERING_PEDESTRIANS;
    120a:	10 92 82 00 	sts	0x0082, r1
					mode_subState=ENTERING_PEDESTRIANS;
    120e:	10 92 81 00 	sts	0x0081, r1
					LED_off(CAR_LEDS_PORT_ID,RED_LED);
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	62 e0       	ldi	r22, 0x02	; 2
    1216:	0e 94 15 07 	call	0xe2a	; 0xe2a <LED_off>
					reinitializeForNormalMode();
    121a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <reinitializeForNormalMode>
					g_button_interrupt_flag=TRUE;
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	80 93 6d 00 	sts	0x006D, r24
					Timer1_deInit();
    1224:	0e 94 28 01 	call	0x250	; 0x250 <Timer1_deInit>
					Timer0_init(&Timer0_Struct);
    1228:	80 e6       	ldi	r24, 0x60	; 96
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	0e 94 bc 01 	call	0x378	; 0x378 <Timer0_init>
	}
	else
	{

	}
}
    1230:	26 96       	adiw	r28, 0x06	; 6
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	f8 94       	cli
    1236:	de bf       	out	0x3e, r29	; 62
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	cd bf       	out	0x3d, r28	; 61
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <timer0_callBack>:

/*
 * Description : This functions contains the logic of the instructions to be executed when Timer0 triggers an interrupt.
 */
void timer0_callBack()
{
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	00 d0       	rcall	.+0      	; 0x1248 <timer0_callBack+0x6>
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
	LED_on(PEDESTRIANS_PORT_ID,RED_LED);
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	62 e0       	ldi	r22, 0x02	; 2
    1250:	0e 94 04 07 	call	0xe08	; 0xe08 <LED_on>
	switch (normal_state)
    1254:	80 91 7d 00 	lds	r24, 0x007D
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	3a 83       	std	Y+2, r19	; 0x02
    125e:	29 83       	std	Y+1, r18	; 0x01
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	9a 81       	ldd	r25, Y+2	; 0x02
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	91 05       	cpc	r25, r1
    1268:	b1 f1       	breq	.+108    	; 0x12d6 <timer0_callBack+0x94>
    126a:	29 81       	ldd	r18, Y+1	; 0x01
    126c:	3a 81       	ldd	r19, Y+2	; 0x02
    126e:	22 30       	cpi	r18, 0x02	; 2
    1270:	31 05       	cpc	r19, r1
    1272:	09 f4       	brne	.+2      	; 0x1276 <timer0_callBack+0x34>
    1274:	77 c0       	rjmp	.+238    	; 0x1364 <timer0_callBack+0x122>
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	9a 81       	ldd	r25, Y+2	; 0x02
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	09 f0       	breq	.+2      	; 0x1280 <timer0_callBack+0x3e>
    127e:	9b c0       	rjmp	.+310    	; 0x13b6 <timer0_callBack+0x174>
	{
	case GREEN:
		LED_on(CAR_LEDS_PORT_ID, GREEN_LED);
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	0e 94 04 07 	call	0xe08	; 0xe08 <LED_on>
		g_car_green_on=TRUE;
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	80 93 7c 00 	sts	0x007C, r24
		g_car_red_on=FALSE;
    128e:	10 92 7a 00 	sts	0x007A, r1
		g_car_yellow_on=FALSE;
    1292:	10 92 7b 00 	sts	0x007B, r1
		normal_interrupt_counter++;
    1296:	80 91 7e 00 	lds	r24, 0x007E
    129a:	90 91 7f 00 	lds	r25, 0x007F
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	90 93 7f 00 	sts	0x007F, r25
    12a4:	80 93 7e 00 	sts	0x007E, r24
		if(normal_interrupt_counter==610)
    12a8:	80 91 7e 00 	lds	r24, 0x007E
    12ac:	90 91 7f 00 	lds	r25, 0x007F
    12b0:	22 e0       	ldi	r18, 0x02	; 2
    12b2:	82 36       	cpi	r24, 0x62	; 98
    12b4:	92 07       	cpc	r25, r18
    12b6:	09 f0       	breq	.+2      	; 0x12ba <timer0_callBack+0x78>
    12b8:	7e c0       	rjmp	.+252    	; 0x13b6 <timer0_callBack+0x174>
		{
			LED_off(CAR_LEDS_PORT_ID, GREEN_LED);
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	60 e0       	ldi	r22, 0x00	; 0
    12be:	0e 94 15 07 	call	0xe2a	; 0xe2a <LED_off>
			g_car_green_on=FALSE;
    12c2:	10 92 7c 00 	sts	0x007C, r1
			normal_interrupt_counter=0;
    12c6:	10 92 7f 00 	sts	0x007F, r1
    12ca:	10 92 7e 00 	sts	0x007E, r1
			normal_state=YELLOW;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	80 93 7d 00 	sts	0x007D, r24
    12d4:	70 c0       	rjmp	.+224    	; 0x13b6 <timer0_callBack+0x174>
		{

		}
		break;
	case YELLOW:
		if(normal_yellow_on==TRUE)
    12d6:	80 91 6c 00 	lds	r24, 0x006C
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	69 f4       	brne	.+26     	; 0x12f8 <timer0_callBack+0xb6>
		{
			g_car_yellow_on=TRUE;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	80 93 7b 00 	sts	0x007B, r24
			g_car_red_on=FALSE;
    12e4:	10 92 7a 00 	sts	0x007A, r1
			g_car_green_on=FALSE;
    12e8:	10 92 7c 00 	sts	0x007C, r1
			LED_on(CAR_LEDS_PORT_ID, YELLOW_LED);
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	61 e0       	ldi	r22, 0x01	; 1
    12f0:	0e 94 04 07 	call	0xe08	; 0xe08 <LED_on>
			normal_yellow_on=FALSE;
    12f4:	10 92 6c 00 	sts	0x006C, r1
		}
		normal_interrupt_counter++;
    12f8:	80 91 7e 00 	lds	r24, 0x007E
    12fc:	90 91 7f 00 	lds	r25, 0x007F
    1300:	01 96       	adiw	r24, 0x01	; 1
    1302:	90 93 7f 00 	sts	0x007F, r25
    1306:	80 93 7e 00 	sts	0x007E, r24
		if(normal_interrupt_counter==122)
    130a:	80 91 7e 00 	lds	r24, 0x007E
    130e:	90 91 7f 00 	lds	r25, 0x007F
    1312:	8a 37       	cpi	r24, 0x7A	; 122
    1314:	91 05       	cpc	r25, r1
    1316:	09 f0       	breq	.+2      	; 0x131a <timer0_callBack+0xd8>
    1318:	4e c0       	rjmp	.+156    	; 0x13b6 <timer0_callBack+0x174>
		{
			normal_yellow_LED_counter++;
    131a:	80 91 80 00 	lds	r24, 0x0080
    131e:	8f 5f       	subi	r24, 0xFF	; 255
    1320:	80 93 80 00 	sts	0x0080, r24
			normal_interrupt_counter=0;
    1324:	10 92 7f 00 	sts	0x007F, r1
    1328:	10 92 7e 00 	sts	0x007E, r1
			if(normal_yellow_LED_counter==5)
    132c:	80 91 80 00 	lds	r24, 0x0080
    1330:	85 30       	cpi	r24, 0x05	; 5
    1332:	99 f4       	brne	.+38     	; 0x135a <timer0_callBack+0x118>
			{
				LED_off(CAR_LEDS_PORT_ID, YELLOW_LED);
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	61 e0       	ldi	r22, 0x01	; 1
    1338:	0e 94 15 07 	call	0xe2a	; 0xe2a <LED_off>
				g_car_yellow_on=FALSE;
    133c:	10 92 7b 00 	sts	0x007B, r1
				normal_yellow_LED_counter=0;
    1340:	10 92 80 00 	sts	0x0080, r1
				normal_interrupt_counter=0;
    1344:	10 92 7f 00 	sts	0x007F, r1
    1348:	10 92 7e 00 	sts	0x007E, r1
				normal_yellow_on=TRUE;
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	80 93 6c 00 	sts	0x006C, r24
				normal_state=RED;
    1352:	82 e0       	ldi	r24, 0x02	; 2
    1354:	80 93 7d 00 	sts	0x007D, r24
    1358:	2e c0       	rjmp	.+92     	; 0x13b6 <timer0_callBack+0x174>
			}
			else
			{
				LED_toggle(CAR_LEDS_PORT_ID, YELLOW_LED);
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	61 e0       	ldi	r22, 0x01	; 1
    135e:	0e 94 26 07 	call	0xe4c	; 0xe4c <LED_toggle>
    1362:	29 c0       	rjmp	.+82     	; 0x13b6 <timer0_callBack+0x174>
		{

		}
		break;
	case RED:
		LED_on(CAR_LEDS_PORT_ID, RED_LED);
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	62 e0       	ldi	r22, 0x02	; 2
    1368:	0e 94 04 07 	call	0xe08	; 0xe08 <LED_on>
		g_car_yellow_on=FALSE;
    136c:	10 92 7b 00 	sts	0x007B, r1
		g_car_red_on=TRUE;
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	80 93 7a 00 	sts	0x007A, r24
		g_car_green_on=FALSE;
    1376:	10 92 7c 00 	sts	0x007C, r1
		if(normal_interrupt_counter<610)
    137a:	80 91 7e 00 	lds	r24, 0x007E
    137e:	90 91 7f 00 	lds	r25, 0x007F
    1382:	32 e0       	ldi	r19, 0x02	; 2
    1384:	82 36       	cpi	r24, 0x62	; 98
    1386:	93 07       	cpc	r25, r19
    1388:	50 f4       	brcc	.+20     	; 0x139e <timer0_callBack+0x15c>
		{
			normal_interrupt_counter++;
    138a:	80 91 7e 00 	lds	r24, 0x007E
    138e:	90 91 7f 00 	lds	r25, 0x007F
    1392:	01 96       	adiw	r24, 0x01	; 1
    1394:	90 93 7f 00 	sts	0x007F, r25
    1398:	80 93 7e 00 	sts	0x007E, r24
    139c:	0c c0       	rjmp	.+24     	; 0x13b6 <timer0_callBack+0x174>
		}
		else
		{
			LED_off(CAR_LEDS_PORT_ID, RED_LED);
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	62 e0       	ldi	r22, 0x02	; 2
    13a2:	0e 94 15 07 	call	0xe2a	; 0xe2a <LED_off>
			g_car_red_on=FALSE;
    13a6:	10 92 7a 00 	sts	0x007A, r1
			normal_interrupt_counter=0;
    13aa:	10 92 7f 00 	sts	0x007F, r1
    13ae:	10 92 7e 00 	sts	0x007E, r1
			normal_state=GREEN;
    13b2:	10 92 7d 00 	sts	0x007D, r1
		}
		break;
	}
}
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <reinitializeForNormalMode>:

/*
 * Description : This functions reinitialize global values used in the callback function of timer0.
 */
void reinitializeForNormalMode()
{
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
	normal_state=GREEN;
    13c8:	10 92 7d 00 	sts	0x007D, r1
	normal_interrupt_counter=0;
    13cc:	10 92 7f 00 	sts	0x007F, r1
    13d0:	10 92 7e 00 	sts	0x007E, r1
	normal_yellow_LED_counter=0;
    13d4:	10 92 80 00 	sts	0x0080, r1
	normal_yellow_on=TRUE;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	80 93 6c 00 	sts	0x006C, r24
}
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <_exit>:
    13e4:	f8 94       	cli

000013e6 <__stop_program>:
    13e6:	ff cf       	rjmp	.-2      	; 0x13e6 <__stop_program>
