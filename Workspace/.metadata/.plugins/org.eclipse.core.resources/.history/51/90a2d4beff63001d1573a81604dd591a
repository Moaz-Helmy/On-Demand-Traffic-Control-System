/******************************************************************************
 *
 * Module: Main Function
 *
 * File Name: main.c
 *
 * Description: Source file for the main function
 *
 * Author: Moaz Mohamed
 *
 *******************************************************************************/

/*******************************************************************************
 *                                Includes                                     *
 *******************************************************************************/
#include "../Application/app.h"
#include <util/delay.h> /*Used for testing only*/
/*******************************************************************************
 *                                Test Functions Prototypes                    *
 *******************************************************************************/
/*******************************************************************************
 *                                Main Function                                *
 *******************************************************************************/
int main(void)
{

	app_start();
	while(1);
}
/*******************************************************************************
 *                                Test Functions                               *
 *******************************************************************************/
void Timer0_callbacktest()
{
	static uint16 interrupt_counter=0;
	interrupt_counter++;
	if(interrupt_counter==122)
	{
		LED_toggle(CAR_LEDS_PORT_ID,YELLOW_LED);
		interrupt_counter=0;
	}

}
void Timer0_test()
{
	static Timer0_ConfigType Timer0_Struct={
			0,0,TIMER0_F_CPU_256,TIMER0_NORMAL_MODE
	};
	Timer0_setCallBack(Timer0_callbacktest);
	Timer0_init(&Timer0_Struct);

}
void Timer1_callbacktest()
{
	LED_toggle(CAR_LEDS_PORT_ID,YELLOW_LED);

}
void Timer1_test()
{
	static Timer1_ConfigType Timer1_Struct={
			0,31250,TIMER1_F_CPU_256,TIMER1_COMPARE_MODE
	};
	Timer1_setCallBack(Timer1_callbacktest);
	Timer1_init(&Timer1_Struct);
}

void LED_test()
{
	uint8 pin_index=0;

	for(pin_index=0; pin_index<3; pin_index++)
	{
		LED_setup(CAR_LEDS_PORT_ID, pin_index);
		LED_setup(PEDESTRIANS_PORT_ID, pin_index);
	}
	LED_on(PORTA_ID,PIN0_ID);
	LED_on(PORTA_ID,PIN1_ID);
	LED_on(PORTA_ID,PIN2_ID);
	LED_on(PORTB_ID,PIN0_ID);
	LED_on(PORTB_ID,PIN1_ID);
	LED_on(PORTB_ID,PIN2_ID);
	_delay_ms(1000);
	LED_off(PORTA_ID,PIN0_ID);
	LED_off(PORTA_ID,PIN1_ID);
	LED_off(PORTA_ID,PIN2_ID);
	LED_off(PORTB_ID,PIN0_ID);
	LED_off(PORTB_ID,PIN1_ID);
	LED_off(PORTB_ID,PIN2_ID);
}
void external_interrupt_test()
{
	EXT_Interrupts_ConfigType EXT_Interrupt_Struct={
			EXT_INT0,EXT_FALLING_EDGE,LED_test
	};
	EXT_Interrupts_interruptSetup(&EXT_Interrupt_Struct);
}

void GPIO_test()
{
	GPIO_setupPinDirection(PORTA_ID,PIN0_ID, PIN_OUTPUT);
	GPIO_setupPinDirection(PORTA_ID,PIN1_ID, PIN_OUTPUT);
	GPIO_setupPinDirection(PORTA_ID,PIN2_ID, PIN_OUTPUT);
	GPIO_setupPinDirection(PORTB_ID,PIN0_ID, PIN_OUTPUT);
	GPIO_setupPinDirection(PORTB_ID,PIN1_ID, PIN_OUTPUT);
	GPIO_setupPinDirection(PORTB_ID,PIN2_ID, PIN_OUTPUT);
	GPIO_writePin(PORTA_ID,PIN0_ID, LOGIC_HIGH);
	GPIO_writePin(PORTA_ID,PIN1_ID, LOGIC_HIGH);
	GPIO_writePin(PORTA_ID,PIN2_ID, LOGIC_HIGH);
	GPIO_writePin(PORTB_ID,PIN0_ID, LOGIC_HIGH);
	GPIO_writePin(PORTB_ID,PIN1_ID, LOGIC_HIGH);
	GPIO_writePin(PORTB_ID,PIN2_ID, LOGIC_HIGH);
	_delay_ms(1000);
	GPIO_writePin(PORTA_ID,PIN0_ID, LOGIC_LOW);
	GPIO_writePin(PORTA_ID,PIN1_ID, LOGIC_LOW);
	GPIO_writePin(PORTA_ID,PIN2_ID, LOGIC_LOW);
	GPIO_writePin(PORTB_ID,PIN0_ID, LOGIC_LOW);
	GPIO_writePin(PORTB_ID,PIN1_ID, LOGIC_LOW);
	GPIO_writePin(PORTB_ID,PIN2_ID, LOGIC_LOW);
}


