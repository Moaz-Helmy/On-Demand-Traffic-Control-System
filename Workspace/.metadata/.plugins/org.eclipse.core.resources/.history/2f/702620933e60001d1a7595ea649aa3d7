/******************************************************************************
 *
 * Module: External Interrupts
 *
 * File Name: external_interrupts.c
 *
 * Description: Source file for External Interrupts
 *
 * Author: Moaz Mohamed
 *
 *******************************************************************************/

/*******************************************************************************
 *                                Includes                                     *
 *******************************************************************************/
#include <avr/interrupt.h>
#include "external_interrupts.h"

/*******************************************************************************
 *                           Global Variables                                  *
 *******************************************************************************/
static volatile void(*g_callBackPtr)(void)=NULL_PTR;

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/


/*******************************************************************************
 *                     Static Functions Prototypes                             *
 *******************************************************************************/
/*
 * Description :
 */

/*******************************************************************************
 *                      Static Functions Definitions                           *
 *******************************************************************************/


/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
/*
 * Description :
 */
EXT_Interrupts_FunctionState EXT_Interrupts_interruptSetup(EXT_Interrupts_ConfigType* ConfigStruct)
{

	if(ConfigStruct->INT>2 || ConfigStruct->INT<0 || ConfigStruct->Edge>3 || ConfigStruct->Edge<0)
	{
		return EXT_INTERRUPT_ERROR;
	}
	else
	{
		switch (INT)
		{
		case EXT_INT0:
			MCUCR=(MCUCR&0xFC)|(Edge);
			GICR|=(1<<INT0);
			break;
		case EXT_INT1:
			MCUCR=(MCUCR&0xF3)|(Edge<<ISC10);
			GICR|=(1<<INT1);
			break;
		case EXT_INT2:
			if(Edge == 2)
			{
				CLEAR_BIT(MCUCSR,ISC2);
				GICR|=(1<<INT2);
			}
			else if(Edge==3)
			{
				SET_BIT(MCUCSR,ISC2);
				GICR|=(1<<INT2);
			}
			else
			{
				return EXT_INTERRUPT_ERROR;
			}
			break;
		}
		return EXT_INTERRUPT_SUCCESS;
	}
}




